{"version":3,"sources":["webpack:///./assets/const/API.ts","webpack:///./assets/lib/Component.ts","webpack:///./assets/page/CPAPIManage.tsx"],"names":["urlPrefix","__webpack_require__","urlVersion","value","API","tableQuery","url","description","queryTable","type","queryOne","removeTableRecord","getByKeyName","tableDistinctQuery","getOneFromTable","updateTableRow","duplicateRow","multiTableUpsert","multiTableSave","reUploadImage","serverRequest","deleteOneFromTable","saveDistribution","pushUpDistribution","blockDistribution","getDistributionStyle","saveDistributionStyle","freshDistributionCache","crawlUrl","exportData","importData","saveImage","Object","keys","forEach","key","__webpack_exports__","d","Component","react__WEBPACK_IMPORTED_MODULE_0__","_handy__WEBPACK_IMPORTED_MODULE_1__","[object Object]","props","super","setTitle","URI","flatten","JSONEditor","Step","antd__WEBPACK_IMPORTED_MODULE_7__","FormItem","antd__WEBPACK_IMPORTED_MODULE_8__","Item","Option","antd__WEBPACK_IMPORTED_MODULE_9__","TextArea","antd__WEBPACK_IMPORTED_MODULE_10__","InputGroup","Group","SIGN_TYPE_ENUM","name","container","react_redux__WEBPACK_IMPORTED_MODULE_2__","_lib_Component__WEBPACK_IMPORTED_MODULE_1__","this","signReg","nextStep","__awaiter","state","current","getGrabApiResult","flatJson","setState","cpSourceMap","map","getResultModelList","getResultMapDetail","getErrorCode","previousStep","upsertSignSchema","field","signIdField","fields","getField","signId","signSchema","signFields","filter","category","test","keyName","replace","each","undefined","includes","isEditing","id","cpId","updateApi","_const_SITE_INFO__WEBPACK_IMPORTED_MODULE_6__","domain","addApi","apiUri","rdUri","_const_API__WEBPACK_IMPORTED_MODULE_4__","setQuery","toString","startLoading","res","_lib_ajax__WEBPACK_IMPORTED_MODULE_3__","post","stopLoading","code","antd__WEBPACK_IMPORTED_MODULE_11__","success","freshSignList","freshSignSchema","error","message","grabId","get","fixedValueMap","fixedValues","JSON","parse","mappings","valNames","Array","isArray","join","expression","mappingStr","mappingValues","mappingArr","match","length","arr","split","couple","source","target","stringify","modelId","modeId","resultModel","resultModelList","getResultModelAndList","resultId","getResultModel","console","log","model","checkApiUri","makeSignSchemeFromFields","requestSchema","makeRequestSchemaFromFields","signSchemaString","grabParamString","grabSite","checkGrabApi","viewJsonResult","resultMapAdd","push","keyValue","resultItemChange","index","event","val","resultItemDelete","splice","toggleResultExpressionModal","resultMapEditingIndex","item","expressionCache","isResultExpressionOpen","resultExpressChange","checkResultModel","payload","makeResultModelPayload","invokeSaveGrab","saveGrab","getDetail","saveGrabResult","grabRes","grabResultParamString","makeGrabResultParam","cancel","isEdited","antd__WEBPACK_IMPORTED_MODULE_12__","confirm","title","content","window","history","back","closeJsonViewer","isJsonViewerOpen","closeJsonEditor","isJsonEditorOpen","saveJson","multiValueChange","jsonEditorKeyName","jsonEditorIndex","jsonEditor","proxyParamChange","proxyParam","clone","proxyParamDrop","dragging","dragItem","_from","assign","addProxyItem","proxyMap","rule","valueType","objectType","deleteProxyItem","proxyItemChange","proxyItemDrop","preventDragOver","preventDefault","toggleMapEditor","isMapEditorOpen","editingKeyName","editingResultDataMap","findIndex","find","defaultValue","mappingMap","paramMappingSelectEnum","editingMapKeyName","addMapItem","addMappingMap","mapItemChange","mappingIndex","modelIdChange","addFixedValueMap","deleteFixedValueMap","changeFixedValueMap","uri","query","isSignEdited","loading","attributes","baseRule","errorCode","label","options","emptyName","isHide","placeholder","required","isShow","combine","noGrid","valueConfig","keyConfig","applySignSchema","beginCharacter","endCharacter","hasLastSplice","paramNames","positionEnum","remark","signKeyMap","signParamName","signParamOrderEnum","signTypeEnum","singleParamFormat","spliceCharacter","onOk","bind","paramSchema","grabExtractElement","signParamOrderEnumInt","isValuePath","_lib_handy__WEBPACK_IMPORTED_MODULE_5__","getValueByPath","some","foundName","originalParam","params","freshGrabList","signField","findField","schema","prevState","targetIndex","targetKey","extractElement","getFieldValue","applyObjByPath","grabResultDataStatus","codeSchema","trim","result","isNeedCombine","isJsonValue","adjustValueType","eachMap","v","Number","MAX_SAFE_INTEGER","des","setTimeout","document","getElementById","option","set","_a","jsonViewer","relateKeyName","relateValue","elProps","itemProps","el","readonly","disabled","onChange","changeValue","antd__WEBPACK_IMPORTED_MODULE_13__","antd__WEBPACK_IMPORTED_MODULE_14__","span","listValueChange","offset","antd__WEBPACK_IMPORTED_MODULE_15__","icon","onClick","addListValue","deleteListValue","labelCol","wrapperCol","i","editJSONIcon","antd__WEBPACK_IMPORTED_MODULE_16__","openJsonEditor","isValueJson","suffix","addMultiValue","deleteMultiValue","makeInput","config","inputEl","optionsEl","className","unshift","antd__WEBPACK_IMPORTED_MODULE_17__","allOp","op","selectProps","switchSignSchema","makeFormItem","stepOne","layout","requestFields","stepTwo","onDragStart","draggable","valueTypeSelect","data-name","onDrop","onDragOver","compact","modelDataSource","text","desc","mappingsCPN","sourceSelect","antd__WEBPACK_IMPORTED_MODULE_18__","showSearch","dataSource","style","minWidth","antd__WEBPACK_IMPORTED_MODULE_19__","fixedValue","errorHandle","stepThree","width","mappingValue","mapEditForm","deleteMapItem","paramMappingOptions","antd__WEBPACK_IMPORTED_MODULE_20__","spinning","visible","onCancel","closable","footer","autosize","minRows","maskClosable"],"mappings":"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","file":"js/31.bundle.js","sourcesContent":["const SYSTEM = require('../../common/SYSTEM');\r\nconst urlPrefix = '/' + SYSTEM.urlVersion.value + '/api';\r\nconst API = {\r\n    tableQuery: {\r\n        url: '/table/list',\r\n        description: '查询mysql表数据，该接口将会失效'\r\n    },\r\n    queryTable: {\r\n        url: '/table/query',\r\n        description: '查询mysql表数据，优先使用这个',\r\n        type: 'all'\r\n    },\r\n    queryOne: {\r\n        url: '/table/query-one',\r\n        description: '跟queryTable差不多，但只获取一个'\r\n    },\r\n    removeTableRecord: {\r\n        url: '/table/remove',\r\n        description: '删除指定fields的数据，可以删除一个或多个'\r\n    },\r\n    getByKeyName: {\r\n        url: '/table/getByKeyName',\r\n        description: '通过keyName字段去查询表中数据'\r\n    },\r\n    tableDistinctQuery: {\r\n        url: '/table/distinct',\r\n        description: '滤重方式查询mysql的某个字段'\r\n    },\r\n    getOneFromTable: {\r\n        url: '/table/one',\r\n        description: '通过主键ID的值，从mysql表中获取单条数据'\r\n    },\r\n    updateTableRow: {\r\n        url: '/table/upsert',\r\n        description: '更新或新增mysql表中的某条数据，仅支持POST方式'\r\n    },\r\n    duplicateRow: {\r\n        url: '/table/duplicateOne',\r\n        description: '复制一条纪录到同一个表'\r\n    },\r\n    multiTableUpsert: {\r\n        url: '/table/multi-upsert',\r\n        description: '可以单次提交多个mysql表的更新或新增'\r\n    },\r\n    multiTableSave: {\r\n        url: '/table/multi-save',\r\n        description: '可以提交多个表的更新操作，包括新增、删除、更新'\r\n    },\r\n    reUploadImage: {\r\n        url: '/common/re-upload',\r\n        description: '转发上传图片到java服务器'\r\n    },\r\n    serverRequest: {\r\n        url: '/common/redirect',\r\n        description: '由于权限和跨域的原因，浏览器不能直接请求某个API，需要用这个API来帮忙请求。'\r\n    },\r\n    deleteOneFromTable: {\r\n        url: '/table/deleteOne',\r\n        description: '从 mysql 表中删除某条数据'\r\n    },\r\n    saveDistribution: {\r\n        url: '/distribution/save',\r\n        description: '保存分发运营配置'\r\n    },\r\n    pushUpDistribution: {\r\n        url: '/distribution/pushUp',\r\n        description: '置顶某条内容'\r\n    },\r\n    blockDistribution: {\r\n        url: '/distribution/block',\r\n        description: '屏蔽某条内容'\r\n    },\r\n    getDistributionStyle: {\r\n        url: '/distribution/getStyle',\r\n        description: '获取某条位置的样式'\r\n    },\r\n    saveDistributionStyle: {\r\n        url: '/distribution/saveStyle',\r\n        description: '保存某条位置的样式'\r\n    },\r\n    freshDistributionCache: {\r\n        url: '/distribution/freshCache',\r\n        description: '刷新缓存'\r\n    },\r\n    crawlUrl: {\r\n        url: '/crawl/getContent',\r\n        description: '抓取某个页面的内容，返回json数据',\r\n        type: 'POST'\r\n    },\r\n    exportData: {\r\n        url: '/table/export',\r\n        description: '下载SQL数据',\r\n        type: 'GET'\r\n    },\r\n    importData: {\r\n        url: '/table/import',\r\n        description: '上传SQL数据',\r\n        type: 'POST'\r\n    },\r\n    saveImage: {\r\n        url: '/crawl/save-image',\r\n        description: '保存图片到魅族服务器',\r\n        type: 'POST'\r\n    }\r\n}\r\nObject.keys(API).forEach(key=>API[key].url = (urlPrefix + API[key].url));\r\n\r\nexport default API;","import * as React from 'react';\r\nimport handy from './handy';\r\nexport default class Component extends React.Component<any, any>{\r\n    constructor(props){\r\n        super(props);\r\n        handy.setTitle(props);\r\n    }\r\n}","/**\n * 接口配置页面\n * 作者：JamesYin\n * 该页面用于配置接口签名、转换、参数等内容，使用前请大喊“嘛哩嘛哩哄”，否则页面会崩溃（手动笑脸）。\n * \n * 1、因为该页面的内容比较独立，所以不使用redux，以免影响整体\n * 2、页面大部分内容由罗小平同学提供逻辑，我实现交互，所以为什么会用选择框、输入框之类的问题，请找小平同学。\n * 3、为了方便接手人维护，尽量少写复杂的通用函数\n */\nimport * as React from 'react';\nimport Component from '../lib/Component';\nimport {connect} from 'react-redux';\nimport ajax from '../lib/ajax';\nimport API from '../const/API';\nimport handy from '../lib/handy';\nimport SITE_INFO from '../const/SITE_INFO';\nimport {\n    Steps,\n    Icon,\n    Button,\n    Form,\n    Input,\n    message,\n    Divider,\n    Switch,\n    Col,\n    Modal,\n    Select,\n    Spin,\n    Tooltip,\n    AutoComplete\n} from 'antd';\nconst URI = require('urijs');\nconst flatten = require('flat');\nconst JSONEditor = require('jsoneditor');\nconst Step = Steps.Step;\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nconst TextArea = Input.TextArea;\nconst InputGroup = Input.Group;\nconst SIGN_TYPE_ENUM = [{\n    name: 'MD5',\n    value: 1\n}, {\n    name: 'SHA1',\n    value: 2\n}, {\n    name: 'SHA256',\n    value: 3\n}];\nclass CPAPIManage extends Component{\n    constructor(props){\n        super(props);\n        // query\n        const uri = new URI();\n        this.query = uri.query(true);\n        this.grabId = this.query.id || 0;\n        this.cpId = this.query.cpId;\n        this.isEditing = !!this.grabId;\n        this.isEdited = false;\n        this.isSignEdited = false;\n        this.state = {\n            loading: 0,\n            current: 0,\n            cpSourceMap: [],\n            proxyMap: [],\n            expressionCache: '',\n            modelId: null,\n            resultModelList: [],\n            proxyParam: {\n                attributes: '',\n                baseRule: '' \n            },\n            isMapEditorOpen: false,\n            isResultExpressionOpen: false,\n            isJsonEditorOpen: false,\n            isJsonViewerOpen: false,\n            editingMapKeyName: 0,\n            resultMapEditingIndex: null,\n            editingResultDataMap: {},\n            dragging: {},\n            errorCode: [],\n            fields: [{\n                label: '签名',\n                keyName: 'signSchema.id',\n                category: 'sign',\n                options: [],\n                type: 'select',\n                emptyName: '新建'\n            }, {\n                label: 'CP ID',\n                keyName: 'signSchema.cpId',\n                category: 'sign',\n                isHide: true\n            },{\n                label: '签名名称',\n                keyName: 'signSchema.remark',\n                category: 'sign'\n            }, {\n                label: '签名类型',\n                keyName: 'signSchema.signTypeEnum',\n                category: 'sign',\n                type: 'select',\n                options: SIGN_TYPE_ENUM\n            }, {\n                label: '字符串添加位置',\n                keyName: 'signSchema.positionEnum',\n                category: 'sign',\n                type: 'select',\n                options: [{\n                    name: 'HEAD',\n                    value: 1\n                }, {\n                    name: 'URL',\n                    value: 2\n                }, {\n                    name: 'ENTITY',\n                    value: 3\n                }]\n            }, {\n                label: '参数排序方式',\n                keyName: 'signSchema.signParamOrderEnum',\n                category: 'sign',\n                type: 'select',\n                options: [{\n                    name: '指定顺序',\n                    value: 1\n                }, {\n                    name: '按参数key正序',\n                    value: 2\n                }, {\n                    name:'按参数key逆序',\n                    value: 3\n                }, {\n                    name: '按value正序',\n                    value: 4\n                }, {\n                    name: '按value逆序',\n                    value: 5\n                }]\n            }, {\n                label: '签名参数名称',\n                keyName: 'signSchema.signParamName',\n                category: 'sign',\n            },{\n                label: '待签名参数',\n                keyName: 'signSchema.paramNames',\n                category: 'sign',\n                type: 'list',\n                value: []\n            }, {\n                label: '单个参数格式',\n                keyName: 'signSchema.singleParamFormat',\n                category: 'sign',\n            }, {\n                label: '开始字符',\n                keyName: 'signSchema.beginCharacter',\n                category: 'sign',\n                placeholder: '不参与排序的签名key'\n            }, {\n                label: '结束字符',\n                keyName: 'signSchema.endCharacter',\n                category: 'sign',\n                placeholder: '不参与排序的签名key'\n            }, {\n                label: '参数拼接字符',\n                keyName: 'signSchema.spliceCharacter',\n                category: 'sign',\n                placeholder: '参与排序的参数'\n            }, {\n                label: '参与排序的签名key',\n                keyName: 'signSchema.signKeyMap',\n                category: 'sign'\n            }, {\n                label: '保留最后的拼接字符',\n                keyName: 'signSchema.hasLastSplice',\n                category: 'sign',\n                type: 'switch'\n            },{\n                label: '签名',\n                keyName: 'signId',\n                category: 'request',\n                type: 'select',\n                options: []\n            }, {\n                label: '名称',\n                keyName: 'name',\n                category: 'request',\n                required: true\n            },{\n                label: 'URL',\n                keyName: 'url',\n                category: 'request',\n                required: true\n            }, {\n                label: '访问方式',\n                keyName: 'methodType',\n                category: 'request',\n                type: 'select',\n                required: true,\n                options: [{\n                    name: 'GET',\n                    value: 1\n                }, {\n                    name: 'POST(Json)',\n                    value: 2\n                }, {\n                    name: 'POST(Map)',\n                    value: 3\n                }]\n            }, {\n                label: 'token位置',\n                keyName: 'positionEnum',\n                category: 'request',\n                type: 'select',\n                options: [{\n                    name: 'head',\n                    value: 'HEAD'\n                }, {\n                    name: 'url',\n                    value: 'URL'\n                }, {\n                    name: 'entity',\n                    value: 'ENTITY'\n                }]\n            }, {\n                label: 'token名称',\n                keyName: 'tokenName',\n                category: 'request'\n            }, {\n                label: 'token获取方式',\n                keyName: 'tokenGrabId',\n                category: 'request',\n                type: 'select',\n                options: []\n            }, {\n                label: '用户唯一标识',\n                placeholder: '标识token使用',\n                category: 'request',\n                keyName: 'userTokenRule'\n            },{\n                label: '返回数据格式',\n                keyName: 'extractElement.type',\n                category: 'request',\n                type: 'select',\n                options: [{\n                    name: 'HTML',\n                    value: 'HTML'\n                }, {\n                    name: 'JSON',\n                    value: 'JSON'\n                }, {\n                    name: 'JSONP',\n                    value: 'JSONP'\n                }]\n            },{\n                label: 'JSONP回调名',\n                keyName: 'extractElement.jsonpMethod',\n                category: 'request',\n                isShow: {\n                    keyName: 'extractElement.type',\n                    value: 'JSONP'\n                }\n            },{\n                label: 'head参数',\n                keyName: 'heads',\n                category: 'request',\n                type: 'multi-value',\n                value: [{\n                    key: '',\n                    value: ''\n                }],\n                combine: {\n                    key: 'headName',\n                    value: 'headValue'\n                }\n            },{\n                label: '参数map结构',\n                keyName: 'paramSchema.paramMap',\n                category: 'request',\n                type: 'multi-value',\n                value: [{\n                    key: '',\n                    value: ''\n                }]\n            }, {\n                label: '返回码表达式',\n                keyName: 'extractElement.grabResultDataStatus.codeSchema.expression',\n                category: 'error-handle',\n                source: 'grab-detail',\n                noGrid: true\n            }, {\n                label: '返回码名称',\n                keyName: 'extractElement.grabResultDataStatus.codeSchema.name',\n                category: 'error-handle',\n                source: 'grab-detail',\n                noGrid: true,\n                defaultValue: 'code'\n            }, {\n                label: '返回码类型',\n                keyName: 'extractElement.grabResultDataStatus.codeSchema.objectType',\n                category: 'error-handle',\n                type: 'select',\n                source: 'grab-detail',\n                options: [{\n                    name: '对象',\n                    value: 'OBJECT'\n                }, {\n                    name: '列表',\n                    value: 'LIST'\n                }],\n                noGrid: true\n            }, {\n                label: '成功码列表',\n                keyName: 'extractElement.grabResultDataStatus.success',\n                category: 'error-handle',\n                placeholder: '请使用英文逗号分隔',\n                type: 'string-list',\n                source: 'grab-detail',\n                noGrid: true\n            }, {\n                label: '错误码映射',\n                keyName: 'extractElement.grabResultDataStatus.errorCodeMap',\n                category: 'error-handle',\n                type: 'key-value',\n                source: 'grab-detail',\n                noGrid: true,\n                valueConfig: {\n                    type: 'select',\n                    options: 'errorCode',\n                    placeholder: '值'\n                },\n                keyConfig: {\n                    type: 'input',\n                    placeholder: '键',\n                }\n            }]\n        };\n    }\n    query;\n    grabId:number;\n    cpId:string;\n    resultId:number;\n    isEditing:boolean;\n    isEdited:boolean;\n    isSignEdited:boolean;\n    signReg = /^signSchema\\./;\n    nextStep= async () => {\n        if(this.state.current === 1){\n            // step three need to load a bunch of configuration from server\n            const value = await this.getGrabApiResult();\n            const flatJson = flatten(value);\n            const keys = Object.keys(flatJson);\n            this.setState({\n                cpSourceMap: keys.map(key=>({key: '$.'+key, value: flatJson[key]}))\n            });\n            // result model\n            await this.getResultModelList();\n            // result map\n            this.getResultMapDetail();\n            // error code\n            this.getErrorCode();\n        }\n        this.setState({\n            current: this.state.current + 1\n        });\n    }\n    previousStep=()=>{\n        this.setState({\n            current: this.state.current - 1\n        });\n    }\n    applySignSchema(signSchema){\n        const fields = this.clone(this.state.fields);\n        for(const field of fields){\n            if(field.category !== 'sign'){\n                continue;\n            }\n            if(this.signReg.test(field.keyName)){\n                const key = field.keyName.replace('signSchema.', '');\n                const value = signSchema[key];\n                if(field.type === 'list'){\n                    field.value = typeof value === 'string' ? JSON.parse(value) : value;\n                }else{\n                    field.value = value;\n                }\n            }\n        }\n        this.setState({fields});\n    }\n    async freshSignSchema(signId){\n        if(!signId){\n            this.applySignSchema({\n                id: signId,\n                beginCharacter:\"\",\n                endCharacter:\"\",\n                hasLastSplice:0,\n                paramNames:[''],\n                positionEnum:null,\n                remark:\"\",\n                signKeyMap:null,\n                signParamName:\"\",\n                signParamOrderEnum:null,\n                signTypeEnum:null,\n                singleParamFormat:\"\",\n                spliceCharacter:\"\",\n            });\n            return;\n        }\n        this.startLoading();\n        const apiUri = new URI('http://om.iflow.meizu.com/service/biz/grab/sign/detail');\n        apiUri.setQuery('signId', signId);\n        const res = await ajax.get(API.serverRequest.url, {url: apiUri.toString()});\n        this.stopLoading();\n        if(res.code !== 200){\n            message.error('获取签名信息失败：' + res.message);\n            return;\n        }\n        const signSchema = res.value;\n        this.applySignSchema(signSchema);\n    }\n    switchSignSchema(signId){\n        // console.log('switch sign id: ', signId);\n        const onOk = ()=>{\n            const {field, fields} = this.getField('signId');\n            field.value = signId;\n            this.setState({fields}, this.freshSignSchema.bind(this, signId));\n            this.isSignEdited = false;\n        };\n        if(this.isSignEdited === false){\n            onOk();\n            return;\n        }\n        Modal.confirm({\n            title: '提示',\n            onOk,\n            content: '当前配置将会丢失，确定？'\n        });\n    }\n    upsertSignSchema=async()=>{\n        const {field: signIdField, fields} = this.getField('signId');\n        const signId = signIdField.value;\n        const signSchema:any = {};\n        const signFields = fields.filter(field=>field.category === 'sign');\n        for(const field of signFields){\n            if(this.signReg.test(field.keyName)){\n                const key = field.keyName.replace('signSchema.', '');\n                let value;\n                if(field.type === 'list'){\n                    value = field.value.filter(each=>['', undefined, null].includes(each) === false);\n                }else{\n                    value = field.value;\n                }\n                signSchema[key] = value;\n            }\n        }\n        const isEditing = !!signId;\n        if(isEditing === false){\n            delete signSchema.id;\n            signSchema.cpId = this.cpId;\n        }\n        const updateApi = SITE_INFO.domain + '/service/biz/grab/sign/update';\n        const addApi = SITE_INFO.domain + '/service/biz/grab/sign/add';\n        const apiUri = new URI(isEditing ? updateApi : addApi);\n        const rdUri = new URI(API.serverRequest.url);\n        rdUri.setQuery('url', apiUri.toString());\n        this.startLoading();\n        const res = await ajax.post(rdUri.toString(), signSchema);\n        this.stopLoading();\n        if(res.code !== 200){\n            message.error('保存签名失败：' + res.message);\n            return;\n        }\n        message.success('保存签名成功');\n        this.freshSignList();\n        this.freshSignSchema(signId);\n    }\n    //  get grab detail\n    async getDetail(){\n        if(!this.grabId){\n            console.log('new grab api.');\n            return;\n        }\n        const apiUri = new URI(SITE_INFO.domain + '/service/biz/grab/detail');\n        apiUri.setQuery('grabId', this.grabId);\n        const url = apiUri.toString();\n        this.startLoading();\n        const res = await ajax.get(API.serverRequest.url, {url});\n        this.stopLoading();\n        if(res.code !== 200){\n            message.error('获取接口配置详情失败：' + res.message);\n            return;\n        }\n        let fields = this.clone(this.state.fields);\n        const value = res.value;\n        if(value.paramSchema){\n            value.paramSchema = JSON.parse(value.paramSchema);\n        }\n        if(value.grabExtractElement){\n            value.grabExtractElement = JSON.parse(value.grabExtractElement);\n        }\n        if(value.signSchema){\n            value.signSchema.signParamOrderEnum = value.signSchema.signParamOrderEnumInt;\n        }\n        fields = fields.map(field=>{\n            const keyName = field.keyName;\n            const isValuePath = handy.isValuePath(keyName);\n            let val = res.value[keyName];\n            if(isValuePath){\n                val = handy.getValueByPath(value, field.keyName);\n            }\n            if(['', null, undefined].includes(val) && field.defaultValue !== undefined){\n                val = field.defaultValue;\n            }\n            if(field.type === 'string-list'){\n                val = Array.isArray(val) ? val.join(',') : '';\n            }\n            if(field.type === 'select' && val){\n                if(field.options.some(each=>each.value === val) === false){\n                    const foundName = field.options.find(each=>each.name === val);\n                    if(foundName){\n                        val = foundName.value;\n                    }\n                }\n            }\n            if(['multi-value', 'key-value'].includes(field.type)){\n                if(typeof val === 'string'){\n                    val = JSON.parse(val);\n                }\n                if(!val || (Array.isArray(val) && val.length === 0)){\n                    field.value = [{\n                        key: '',\n                        value: ''\n                    }];\n                }else{\n                    if(Array.isArray(val)){\n                        if(field.combine){\n                            field.value = val.map(each=>{\n                                return {\n                                    key: each[field.combine.key],\n                                    value: each[field.combine.value]\n                                }\n                            });\n                        }else{\n                            field.value = val;\n                        }\n                    }else if (typeof val === 'object'){\n                        field.value = Object.keys(val).map(key=>({key, value: val[key]}));\n                    }\n                }\n            }else if(field.type === 'list'){\n                if(!val){\n                    field.value = [''];\n                }else{\n                    field.value = val;\n                }\n            }else{\n                field.value = val;\n            }\n            return field;\n        });\n        // apply original param\n        if(value.originalParam){\n            // proxy param\n            const proxyParam = this.clone(this.state.proxyParam);\n            proxyParam.attributes = value.originalParam.attributes;\n            proxyParam.baseRule = value.originalParam.baseRule;\n            // proxy map\n            const proxyMap = value.originalParam.params.map(each=>{\n                return {\n                    rule: each.rule,\n                    name: each.name,\n                    valueType: each.valueType,\n                    objectType: each.objectType\n                };\n            });\n            this.setState({\n                proxyParam,\n                proxyMap\n            });\n        }\n        this.setState({\n            fields\n        });\n    }\n    getResultModelAndList(modelId?){\n        if(!modelId){\n            modelId = this.state.modelId;\n        }\n        const resultModelList = this.clone(this.state.resultModelList);\n        const resultModel = resultModelList.find(each=>each.id === modelId);\n        return {resultModelList, resultModel};\n    }\n    getResultMapDetail = async () => {\n        const apiUri = new URI(SITE_INFO.domain + '/service/biz/grab/result/detail');\n        apiUri.setQuery('grabId', this.grabId);\n        this.startLoading();\n        const res = await ajax.get(API.serverRequest.url, {url: apiUri.toString()})\n        this.stopLoading();\n        if(res.code !== 200){\n            message.error('获取来源结果转换配置失败：' + res.message);\n            return;\n        }\n        if(res.value){\n            // fixedValueMap\n            let fixedValueMap = [];\n            if(res.value.fixedValues){\n                const fixedValues = JSON.parse(res.value.fixedValues);\n                if(fixedValues.fixedValueMap){\n                    fixedValueMap = Object.keys(fixedValues.fixedValueMap).map(key=>{\n                        return {key, value: fixedValues.fixedValueMap[key]};\n                    });\n                }\n            }\n            // mappings\n            let mappings = [];\n            if(res.value.mappings) {\n                mappings = JSON.parse(res.value.mappings).map(each=>{\n                    return {\n                        keyName: each.keyName,\n                        valNames: Array.isArray(each.valNames) ? each.valNames.join(',') : (each.valNames ?  each.valNames : ''),\n                        expression: each.expression\n                    }\n                });\n            }\n            // mapping values\n            let mappingStr = res.value.mappingValues;\n            let mappingValues = [];\n            if(mappingStr){\n                const mappingArr = mappingStr.match(/\"mappingMap\"\\s*:\\s*({[^}]*})/g);\n                if(mappingArr && mappingArr.length){\n                    mappingArr.forEach(each=>{\n                        const arr = each.replace(/\"mappingMap\"\\s*:\\s*/, '')\n                            .replace(/\\s*/g, '')\n                            .replace(/^\\{/, '')\n                            .replace(/\\}$/, '')\n                            .split(',')\n                            .map(couple=>{\n                                if(!couple){\n                                    return;\n                                }\n                                const arr = couple.split(/:(.+)/);\n                                const source = arr[0].replace(/\"/g, '');\n                                const target = arr[1].replace(/\"/g, '');\n                                return {source, target};\n                            }).filter(each=>!!each);\n                        mappingStr = mappingStr.replace(each, `\"mappingMap\":`+ JSON.stringify(arr));\n                    });\n                    mappingValues = JSON.parse(mappingStr);\n                }\n            }\n            // back-end developer make a typo mistake.\n            // modeId === modelId\n            const modelId = res.value.modeId;\n            const {resultModel, resultModelList} = this.getResultModelAndList(modelId);\n            if(!resultModel){\n                message.error('找不到相应的转换模型');\n                return;\n            }\n            resultModel.mappings = mappings;\n            resultModel.mappingValues = mappingValues;\n            resultModel.fixedValueMap = fixedValueMap;\n            // some id\n            resultModel.grabId = this.grabId;\n            resultModel.resultId = res.value.id;\n            this.setState({\n                resultModelList,\n                modelId\n            });\n            this.getResultModel(res.value.modeId);\n        }\n    }\n    getResultModelList = async () => {\n        if(this.state.resultModelList.length){\n            console.log('model list is exist, dont retrieve again.')\n            return;\n        }\n        const apiUri = new URI(SITE_INFO.domain + '/service/biz/grab/result/model');\n        this.startLoading();\n        const res = await ajax.get(API.serverRequest.url, {url: apiUri.toString()});\n        this.stopLoading();\n        if(res.code !== 200){\n            message.error('获取转换模型列表失败：' + res.message);\n            return;\n        }\n        this.setState({resultModelList: res.value});\n    }\n    getResultModel = async (modelId) => {\n        const {resultModel, resultModelList} = this.getResultModelAndList(modelId);\n        if(resultModel.model && resultModel.model.length){\n            console.log('this model has been retrieved, dont fetch again.');\n            return;\n        }\n        const apiUri = new URI(SITE_INFO.domain + '/service/biz/grab/result/getModel');\n        apiUri.setQuery('modelId', modelId);\n        this.startLoading();\n        const res = await ajax.get(API.serverRequest.url, {url: apiUri.toString()});\n        this.stopLoading();\n        if(res.code !== 200){\n            message.error('获取转换模型失败：' + res.message);\n            return;\n        }\n        resultModel.model = res.value;\n        this.setState({resultModelList});\n    }\n    async componentDidMount(){\n        await this.getDetail();\n        await this.freshGrabList();\n        const signField = this.findField(this.state.fields, 'signId');\n        this.freshSignSchema(signField.value);\n        this.freshSignList();\n        \n    }\n    async freshSignList(){\n        this.startLoading();\n        const apiUri = new URI(SITE_INFO.domain + '/service/biz/grab/sign/list');\n        const res = await ajax.get(API.serverRequest.url, {url: apiUri.toString()});\n        this.stopLoading();\n        if(res.code !== 200){\n            message.error('获取签名列表失败：' + res.message);\n            return;\n        }\n        const fields = this.clone(this.state.fields);\n        const options = res.value.map(schema=>{\n            return {name: schema.remark, value: schema.id};\n        });\n        for(const field of fields){\n            if(['signId', 'signSchema.id'].includes(field.keyName)){\n                field.options = options;\n            }\n        }\n        this.setState({fields});\n    }\n    async freshGrabList(){\n        const apiUri = new URI(SITE_INFO.domain + '/service/biz/grab/list');\n        apiUri.setQuery('cpId', this.cpId);\n        this.startLoading();\n        const res = await ajax.get(API.serverRequest.url, {url: apiUri.toString()});\n        this.stopLoading();\n        if(res.code !== 200){\n            message.error('获取当前CP的接口列表失败：' + res.message);\n            return;\n        }\n        const {field, fields} = this.getField('tokenGrabId');\n        field.options = res.value.map(each=>{\n            return {\n                name: each.name,\n                value: each.id\n            };\n        });\n        this.setState({fields});\n    }\n    startLoading(){\n        this.setState(prevState=>({\n            loading: prevState.loading + 1\n        }));\n    }\n    stopLoading(){\n        this.setState(prevState=>({\n            loading: prevState.loading - 1\n        }));\n    }\n    clone(target){\n        return JSON.parse(JSON.stringify(target));\n    }\n    getField(keyName){\n        const fields = this.clone(this.state.fields);\n        const field = this.findField(fields, keyName);\n        return {\n            fields,\n            field\n        };\n    }\n    findField(fields, keyName){\n        return fields.find(field=>field.keyName === keyName);\n    }\n    addMultiValue(keyName){\n        const {field, fields} = this.getField(keyName);\n        // console.log(foundField);\n        field.value.push({\n            key: undefined,\n            value: undefined\n        });\n        this.setState({fields});\n    }\n    deleteMultiValue(keyName, index){\n        const {field, fields} = this.getField(keyName);\n        field.value.splice(index, 1);\n        this.setState({fields});\n    }\n    multiValueChange(keyName, targetIndex, targetKey, event){\n        const val = (event && event.target) ? event.target.value : event;\n        const {field, fields} = this.getField(keyName);\n        field.value[targetIndex][targetKey] = val;\n        this.setState({fields});\n        this.isEdited = true;\n    }\n    listValueChange(keyName, targetIndex, event){\n        const value = event.target.value;\n        const {field, fields} = this.getField(keyName);\n        field.value[targetIndex] = value;\n        this.setState({fields});\n    }\n    addListValue(keyName){\n        const {field, fields} = this.getField(keyName);\n        field.value.push('');\n        this.setState({fields});\n    }\n    deleteListValue(keyName, index){\n        const {field, fields} = this.getField(keyName);\n        field.value.splice(index, 1);\n        this.setState({fields});\n    }\n    changeValue(keyName, event){\n        const val = (event && event.target) ? event.target.value : event;\n        const fields = this.clone(this.state.fields);\n        const foundField = this.findField(fields, keyName);\n        foundField.value = val;\n        this.setState({fields});\n        this.isEdited = true;\n        if(this.signReg.test(keyName)){\n            this.isSignEdited = true;\n        }\n    }\n    makeSignSchemeFromFields(){\n        const signSchema:any = {};\n        for(const field of this.state.fields){\n            if(this.signReg.test(field.keyName)){\n                const key = field.keyName.replace(this.signReg, '');\n                if(key){\n                    signSchema[key] = field.value;\n                }\n            }\n        }\n        return signSchema;\n    }\n    makeRequestSchemaFromFields(){\n        const requestSchema:any = {\n            extractElement: {},\n            originalParam: {}\n        };\n        // console.log('cp id: ', this.cpId);\n        if(this.grabId){\n            requestSchema.id = +this.grabId;\n        }\n        requestSchema.cpId = +this.cpId;\n        for(const field of this.state.fields){\n            if(['error-handle', 'request'].includes(field.category) === false){\n                continue;\n            }\n            const val = this.getFieldValue(field);\n            const isValuePath = handy.isValuePath(field.keyName);\n            if(isValuePath){\n                handy.applyObjByPath(requestSchema, field.keyName, val);\n            }else{\n                requestSchema[field.keyName] = val;\n            }\n        }\n        if(this.state.proxyParam){\n            const originalParam = this.state.proxyParam;\n            requestSchema.originalParam.attributes = originalParam.attributes;\n            requestSchema.originalParam.baseRule = originalParam.baseRule;\n        }\n        if(Array.isArray(this.state.proxyMap)){\n            requestSchema.originalParam.params = this.state.proxyMap.map(each=>{\n                return each;\n            });\n        }\n        // if error code expression is empty. don't send grabResultDataStatus value.\n        if(!requestSchema.extractElement.grabResultDataStatus.codeSchema.expression){\n            delete requestSchema.extractElement.grabResultDataStatus;\n        }\n        return requestSchema;\n    }\n    getGrabApiResult = async () => {\n        const checkApiUri = new URI('http://om.iflow.meizu.com/service/biz/grab/test');\n        const rdUri = new URI(API.serverRequest.url);\n        rdUri.setQuery('url', checkApiUri.toString());\n        const signSchema = this.makeSignSchemeFromFields();\n        const requestSchema = this.makeRequestSchemaFromFields();\n        this.startLoading();\n        const res = await ajax.post(rdUri.toString(), {\n            signSchemaString: signSchema,\n            grabParamString: requestSchema,\n            grabSite: {}\n        });\n        this.stopLoading();\n        if(res.code !== 200){\n            message.error('获取测试数据失败: ' + res.message);\n        }\n        return JSON.parse(res.value);\n    }\n    checkGrabApi = async() => {\n        const value = await this.getGrabApiResult();\n        if(value){\n            this.viewJsonResult(value);\n        }else{\n            message.error('没有返回数据');\n        }\n    }\n    // result map\n    resultMapAdd = () => {\n        const {resultModel, resultModelList} = this.getResultModelAndList();\n        if(!resultModel.mappings){\n            resultModel.mappings = [];\n        }\n        const mappings = resultModel.mappings;\n        mappings.push({\n            keyName: '',\n            keyValue: ''\n        });\n        this.setState({resultModelList});\n    }\n    resultItemChange = (index, keyName, event) => {\n        const val = (event && event.target) ? event.target.value : event;\n        const {resultModel, resultModelList} = this.getResultModelAndList();\n        const mappings = resultModel.mappings;\n        mappings[index][keyName] = val;\n        this.setState({resultModelList});\n    }\n    resultItemDelete = (index)=>{\n        const {resultModel, resultModelList} = this.getResultModelAndList();\n        const mappings = resultModel.mappings;\n        mappings.splice(index, 1);\n        this.setState({resultModelList});\n    }\n    toggleResultExpressionModal=(resultMapEditingIndex, type = '')=>{\n        // console.log('open expression index: ' + resultMapEditingIndex);\n        const {resultModel, resultModelList} = this.getResultModelAndList();\n        const mappings = resultModel.mappings;\n        const item = mappings[resultMapEditingIndex];\n        let expressionCache = '';\n        let isResultExpressionOpen = false;\n        // console.log('item: ' + JSON.stringify(item));\n        if(resultMapEditingIndex !== null){\n            expressionCache = item.expression;\n            isResultExpressionOpen = true;\n        }\n        if(type === 'cancel'){\n            item.expression = this.state.expressionCache;\n            isResultExpressionOpen = false;\n            resultMapEditingIndex = null;\n        }\n        if(type === 'save'){\n            // it saved already in this.resultExpressChange\n            isResultExpressionOpen = false;\n        }\n        this.setState({\n            isResultExpressionOpen,\n            resultMapEditingIndex,\n            expressionCache,\n            resultModelList\n        });\n    }\n    resultExpressChange=(event)=>{\n        const {resultModel, resultModelList} = this.getResultModelAndList();\n        const mappings = resultModel.mappings;\n        const item = mappings[this.state.resultMapEditingIndex];\n        item.expression = event.target.value;\n        this.setState({\n            resultModelList\n        });\n    }\n    getFieldValue(field){\n        if(field.type === 'string-list'){\n            return typeof field.value === 'string' ? field.value.split(',').map(each=>each.trim()) : [];\n        }else if(['multi-value', 'key-value'].includes(field.type)){\n            let result;\n            const isNeedCombine:boolean = !!field.combine;\n            if(isNeedCombine){\n                result = [];\n            }else{\n                result = {};\n            }\n            field.value.forEach(each=>{\n                if(!each.key){\n                    return;\n                }\n                if(typeof each.value === 'string' && handy.isJsonValue(each.value)){\n                    each.value = JSON.parse(each.value);\n                }\n                if(isNeedCombine){\n                    result.push({\n                        [field.combine.key]: each.key,\n                        [field.combine.value]: each.value\n                    });\n                }else{\n                    result[each.key] = this.adjustValueType(each.value);\n                }\n            });\n            return result;\n        }else{\n            return field.value;\n        }\n    }\n    makeGrabResultParam(){\n        const resultModel = this.state.resultModelList.find(each=>each.id === this.state.modelId);\n        if(!resultModel){\n            message.error('找不到转换模型');\n            return;\n        }\n        const model = this.clone(resultModel);\n        delete model.model;\n        if(Array.isArray(model.mappingValues) && model.mappingValues.length){\n            model.mappingValues = model.mappingValues.map(each=>{\n                if(Array.isArray(each.mappingMap) && each.mappingMap.length){\n                    const mappingMap = {};\n                    each.mappingMap.forEach(eachMap => {\n                        const source = this.adjustValueType(eachMap.source);\n                        const target = this.adjustValueType(eachMap.target);\n                        mappingMap[source] = target;\n                    });\n                    each.mappingMap = mappingMap;\n                }else{\n                    each.mappingMap = {};\n                    if(!each.paramMappingSelectEnum && !each.defaultValue){\n                        return null;\n                    }\n                }\n                return each;\n            }).filter(each=>!!each);\n        }\n        if(Array.isArray(model.fixedValueMap) && model.fixedValueMap.length){\n            const fixedValueMap = {};\n            model.fixedValueMap.forEach(each=>{\n                fixedValueMap[each.key] = this.adjustValueType(each.value);\n            });\n            model.fixedValues = {\n                fixedValueMap\n            };\n            delete model.fixedValueMap;\n        }\n        model.mappings = model.mappings.map(function(each){\n            if(typeof each.valNames === 'string' && each.valNames){\n                each.valNames = each.valNames.split(',');\n            }else{\n                if(['',null,undefined].includes(each.valNames)){\n                    each.valNames = [];\n                }else{\n                    each.valNames = [each.valNames];\n                }\n            }\n            return each;\n        });\n        // transfer object to string\n        model.fixedValues = JSON.stringify(model.fixedValues);\n        model.mappingValues = JSON.stringify(model.mappingValues);\n        model.mappings = JSON.stringify(model.mappings);\n        // \"modeId\" is not a typo error\n        model.modeId = this.state.modelId;\n        // if update a grab, append grab id to parameters\n        if(this.grabId){\n            model.grabId = +(this.grabId);\n        }\n        // In editing state, \"id\" is \"model id\". But in post state, \"id\" should be \"grab result id\".\n        if(model.resultId){\n            model.id = model.resultId;\n            delete model.resultId;\n        }else{\n            delete model.id;\n        }\n        return model;\n    }\n    adjustValueType(val){\n        if(typeof val !== 'string'){\n            return val;\n        }\n        if(val === 'null'){\n            return null;\n        }\n        if(val === 'true'){\n            return true;\n\n        }\n        if(val === 'false'){\n            return false;\n        }\n        if(val === 'undefined'){\n            return undefined;\n        }\n        if(val === ''){\n            return '';\n        }\n        if(/[^\\d]/.test(val) === false){\n            // this value may bigger than Number.MAX_SAFE_INTEGER.\n            const v = (+val);\n            if(v < Number.MAX_SAFE_INTEGER){\n                val = v;\n            }\n        }\n        return val;\n    }\n    makeResultModelPayload(){\n        const signSchemaString = this.makeSignSchemeFromFields();\n        const grabParamString = this.makeRequestSchemaFromFields();\n        const grabResultParamString = this.makeGrabResultParam();\n        return {\n            signSchemaString,\n            grabParamString,\n            grabResultParamString,\n            grabSite: {}\n        };\n    }\n    async getErrorCode(){\n        const apiUri = new URI(SITE_INFO.domain + '/service/biz/grab/result/getErrorCode');\n        this.startLoading();\n        const res = await ajax.get(API.serverRequest.url, {url: apiUri.toString()});\n        this.stopLoading();\n        if(res.code !== 200){\n            message.error('获取错误码列表错误：' + res.message);\n            return;\n        }\n        const errorCode = Array.isArray(res.value) ? res.value.map(each=>({name: each.des, value: each.type})) : [];\n        this.setState({errorCode});\n    }\n    checkResultModel=async ()=>{\n        const payload = this.makeResultModelPayload();\n        const apiUri = new URI(SITE_INFO.domain + '/service/biz/grab/result/test');\n        const rdUri = new URI(API.serverRequest.url);\n        rdUri.setQuery('url', apiUri.toString());\n        this.startLoading();\n        const res = await ajax.post(rdUri.toString(), payload);\n        this.stopLoading();\n        if(res.code !== 200){\n            message.error('获取验证信息失败：' + res.message);\n            return;\n        }\n        this.viewJsonResult(res.value);\n    }\n    invokeSaveGrab=async()=>{\n        const grabParamString = this.makeRequestSchemaFromFields();\n        const apiUri = new URI(SITE_INFO.domain + '/service/biz/grab/update');\n        const rdUri = new URI(API.serverRequest.url);\n        rdUri.setQuery('url', apiUri.toString());\n        this.startLoading();\n        const res = await ajax.post(rdUri.toString(), grabParamString);\n        this.stopLoading();\n        return res;\n    }\n    saveGrab=async()=>{\n        const res = await this.invokeSaveGrab();\n        if(res.code !== 200){\n            message.error('保存访问配置失败：' + res.message);\n            return;\n        }\n        if(!res.value){\n            message.error('没返回保存grab的id.');\n            return;\n        }\n        if(res.value === true){\n            // when return true, it mean update grab no add a new grab.\n        }else{\n            this.grabId = +res.value;\n        }\n        message.success('保存成功');\n        this.getDetail();\n    }\n    saveGrabResult=async()=>{\n        const grabRes = await this.invokeSaveGrab();\n        if(grabRes.code !== 200){\n            message.error('保存访问配置失败：' + grabRes.message);\n            return;\n        }\n        this.getDetail();\n        this.getResultMapDetail();\n        const grabResultParamString = this.makeGrabResultParam();\n        const rdUri = new URI(API.serverRequest.url);\n        rdUri.setQuery('url', SITE_INFO.domain + '/service/biz/grab/result/update');\n        this.startLoading();\n        const res = await ajax.post(rdUri.toString(), grabResultParamString);\n        this.stopLoading();\n        if(res.code !== 200){\n            message.error('保存转换配置失败：' + res.message);\n            return;\n        }\n        message.success('保存成功');\n        this.getResultMapDetail();\n    }\n    cancel=()=>{\n        if(this.isEdited){\n            Modal.confirm({\n                title: '提示',\n                content: '编辑的内容将会丢失，确定？',\n                onOk(){\n                    window.history.back();\n                }\n            });\n        }else{\n            window.history.back();\n        }\n    }\n    jsonEditor;\n    jsonEditorKeyName;\n    jsonEditorIndex;\n    openJsonEditor(keyName, index){\n        const field = this.state.fields.find(each=>each.keyName === keyName);\n        let value = field.value[index].value;\n        if(typeof value === 'string'){\n            value = JSON.parse(value);\n        }\n        this.setState({isJsonEditorOpen: true}, ()=>{\n            this.jsonEditorKeyName = keyName;\n            this.jsonEditorIndex = index;\n            setTimeout(() => {\n                if(this.jsonEditor === undefined){\n                    const container = document.getElementById('json-editor');\n                    const option = {};\n                    this.jsonEditor = new JSONEditor(container, option);\n                }\n                this.jsonEditor.set(value);\n            }, 10);\n        });\n    }\n    jsonViewer;\n    viewJsonResult(value){\n        if(!value){\n            return;\n        }\n        if(typeof value !== 'object'){\n            try{\n                value = JSON.parse(value);\n            }catch{\n                message.error('json-editor: 无法展示该变量');\n                return;\n            }\n        }\n        this.setState({isJsonViewerOpen: true}, ()=>{\n            setTimeout(() => {\n                if(this.jsonViewer === undefined){\n                    const container = document.getElementById('json-viewer');\n                    const option = {};\n                    this.jsonViewer = new JSONEditor(container, option);\n                }\n                this.jsonViewer.set(value);\n            }, 10);\n        });\n    }\n    closeJsonViewer=()=>{\n        this.setState({isJsonViewerOpen: false});\n    }\n    closeJsonEditor=()=>{\n        this.setState({isJsonEditorOpen: false});\n    }\n    saveJson=()=>{\n        this.multiValueChange(this.jsonEditorKeyName, this.jsonEditorIndex, 'value', JSON.stringify(this.jsonEditor.get()));\n        this.closeJsonEditor();\n    }\n    makeFormItem(field){\n        // console.log('field:', field);\n        if(field.isShow){\n            const relateKeyName = field.isShow.keyName;\n            const relateValue = field.isShow.value;\n            const foundField = this.findField(this.state.fields, relateKeyName);\n            if(foundField.value !== relateValue){\n                return '';\n            }\n        }else if(field.isHide){\n            return '';\n        }\n        const elProps:any = {};\n        const itemProps:any = {};\n        let el;\n        if(field.placeholder){\n            elProps.placeholder = field.placeholder;\n        }\n        if(field.readonly){\n            elProps.disabled = true;\n        }\n        elProps.onChange = this.changeValue.bind(this, field.keyName);\n        elProps.value = field.value;\n        if(field.type === 'switch'){\n            el = (\n                <Switch {...elProps} />\n            );\n        }else if(field.type === 'list'){\n            el = field.value.map((each,index)=>{\n                return (\n                    <div key={index}>\n                        <Col span={20}>\n                            <FormItem>\n                                <Input value={each} onChange={this.listValueChange.bind(this, field.keyName, index)}></Input>\n                            </FormItem>\n                        </Col>\n                        <Col span={3} offset={1}>\n                            <Button.Group>\n                                <Button icon=\"plus\" onClick={this.addListValue.bind(this, field.keyName)}></Button>\n                                {field.value.length !== 1 && <Button icon=\"minus\" onClick={this.deleteListValue.bind(this, field.keyName, index)}></Button>}\n                            </Button.Group>\n                        </Col>\n                    </div>\n                );\n            });\n        }else if(field.type === 'multi-value'){\n            const labelCol = {span: 4};\n            const wrapperCol = {span: 18};\n            el = field.value.map((val,i)=>{\n                const editJSONIcon = <Icon type=\"edit\" onClick={this.openJsonEditor.bind(this, field.keyName, i, 'value')} />;\n                if(typeof val.value !== 'string'){\n                    val.value = JSON.stringify(val.value);\n                }\n                let isValueJson = handy.isJsonValue(val.value);\n                return (\n                    <div key={i}>\n                        <Col span={10}>\n                            <FormItem label=\"参数\" labelCol={labelCol} wrapperCol={wrapperCol}>\n                                <Input value={val.key} onChange={this.multiValueChange.bind(this, field.keyName, i, 'key')}></Input>\n                            </FormItem>\n                        </Col>\n                        <Col span={10}>\n                            <FormItem label=\"值\" labelCol={labelCol} wrapperCol={wrapperCol}>\n                                <Input value={val.value} onChange={this.multiValueChange.bind(this, field.keyName, i, 'value')}\n                                    suffix={isValueJson&&editJSONIcon}></Input>\n                            </FormItem>\n                        </Col>\n                        <Col span={4}>\n                            <Button.Group>\n                                <Button icon=\"plus\" onClick={this.addMultiValue.bind(this, field.keyName)}></Button>\n                                {field.value.length !== 1 && <Button icon=\"minus\" onClick={this.deleteMultiValue.bind(this, field.keyName, i)}></Button>}\n                            </Button.Group>\n                        </Col>\n                    </div>\n                )\n            });\n        } else if(field.type === 'key-value'){\n            // 'key-value' type is kind of update from 'multi-value' type.\n            Array.isArray(field.value) === false && (field.value = []);\n            el = field.value.map((val,i)=>{\n                const makeInput = (config, target)=>{\n                    let inputEl;\n                    if(config.type === 'select'){\n                        let options;\n                        if(Array.isArray(config.options)){\n                            options = config.options;\n                        }else if(typeof config.options === 'string'){\n                            options = this.state[config.options];\n                        }\n                        const optionsEl = options.map(each=><Option key={each.value} value={each.value}>{each.name}</Option>);\n                        inputEl = <Select value={val[target]}\n                            placeholder={config.placeholder}\n                            onChange={this.multiValueChange.bind(this, field.keyName, i, target)}>{optionsEl}</Select>;\n                    }else{\n                        inputEl = <Input value={val[target]}\n                            placeholder={config.placeholder}\n                            onChange={this.multiValueChange.bind(this, field.keyName, i, target)}></Input>;\n                    }\n                    return inputEl;\n                };\n                return (\n                    <div className=\"item\" key={i}>\n                        {makeInput(field.keyConfig, 'key')}\n                        <Icon type=\"right\" />\n                        {makeInput(field.valueConfig, 'value')}\n                        <Button icon=\"close\" onClick={this.deleteMultiValue.bind(this, field.keyName, i)}></Button>\n                    </div>\n                )\n            });\n            el.unshift(<Divider key=\"divider\">{field.label}</Divider>);\n            el.push(<div className=\"item\" key=\"plus\"><Button icon=\"plus\" className=\"block\" onClick={this.addMultiValue.bind(this, field.keyName)}></Button></div>);\n            return el;\n        }else if(field.type === 'select'){\n            if(field.value === undefined){\n                field.value = null;\n            }\n            const allOp = <Option key=\"all\" value={null}>{field.emptyName || '无'}</Option>;\n            const options = field.options.map(op=>{\n                return <Option key={op.value} value={op.value}>{op.name}</Option>\n            });\n            options.unshift(allOp);\n            const selectProps:any = {};\n            selectProps.value = field.value;\n            selectProps.onChange = field.keyName === 'signSchema.id' ?\n                this.switchSignSchema.bind(this):\n                this.changeValue.bind(this, field.keyName);\n            el = (\n                <Select {...selectProps}>\n                    {options}\n                </Select>\n            );\n        }else{\n            el = (\n                <Input {...elProps}></Input>\n            );\n        }\n        itemProps.label = field.label;\n        if(field.noGrid){\n            // no grid\n        }else{\n            itemProps.labelCol = {span: 4};\n            itemProps.wrapperCol = {span: 18};\n        }\n        itemProps.key = field.label;\n        if(field.required){\n            itemProps.required = true;\n        }\n        return (\n            <FormItem {...itemProps}>\n                {el}\n            </FormItem>\n        );\n    }\n    proxyParamChange = (key, event) => {\n        const proxyParam = this.clone(this.state.proxyParam);\n        proxyParam[key] = event.target.value;\n        this.setState({proxyParam});\n    }\n    proxyParamDrop = (key) => {\n        const proxyParam = this.clone(this.state.proxyParam);\n        proxyParam[key] = this.state.dragging.key;\n        this.setState({proxyParam});\n    }\n    dragItem = (item, _from) => {\n        this.setState({\n            dragging: {...item, _from}\n        });\n    }\n    addProxyItem = () => {\n        const proxyMap = this.clone(this.state.proxyMap);\n        proxyMap.push({\n            rule: '',\n            name: '',\n            valueType: null,\n            objectType: null,\n            map: []\n        });\n        this.setState({proxyMap});\n    }\n    deleteProxyItem = (index) => {\n        const proxyMap = this.clone(this.state.proxyMap);\n        proxyMap.splice(index, 1);\n        this.setState({proxyMap});\n    }\n    proxyItemChange = (index, key, event) => {\n        const value = (event && event.target) ? event.target.value : event;\n        const proxyMap = this.clone(this.state.proxyMap);\n        const item = proxyMap[index];\n        item[key] = value;\n        this.setState({proxyMap});\n    }\n    proxyItemDrop = (index) => {\n        const proxyMap = this.clone(this.state.proxyMap);\n        proxyMap[index].rule = this.state.dragging.key;\n        this.setState({proxyMap});\n    }\n    preventDragOver = (event) =>{\n        event.preventDefault();\n        // console.log(arguments);\n    }\n    toggleMapEditor= (keyName) => {\n        if(!keyName){\n            message.error('请先选择目标参数');\n            return;\n        }\n        if(keyName === '_ok'){\n            this.setState({\n                isMapEditorOpen: false\n            });\n            return;\n        }\n        const {resultModel, resultModelList} = this.getResultModelAndList();\n        if(!resultModel.mappingValues){\n            resultModel.mappingValues = [];\n        }\n        const mappingValues = resultModel.mappingValues;\n        if(keyName === '_cancel'){\n            // fallback original value\n            const editingKeyName = this.state.editingResultDataMap.keyName;\n            const index = mappingValues.findIndex(each=>each.keyName === editingKeyName);\n            mappingValues.splice(index, 1, this.state.editingResultDataMap);\n            this.setState({\n                resultModelList,\n                isMapEditorOpen: false\n            });\n            return;\n        }\n        if(keyName){\n            const item = mappingValues.find(each=>each.keyName === keyName);\n            if(!item){\n                mappingValues.push({\n                    defaultValue: '',\n                    keyName: keyName,\n                    mappingMap: [],\n                    paramMappingSelectEnum: ''\n                });\n            }\n        }\n        const editingResultDataMap = mappingValues.find(each=>each.keyName === keyName);\n        this.setState({\n            editingResultDataMap,\n            resultModelList,\n            isMapEditorOpen: !this.state.isMapEditorOpen,\n            editingMapKeyName: keyName\n        });\n    }\n    addMapItem=()=>{\n        const {resultModel, resultModelList} = this.getResultModelAndList();\n        const mappingValues = resultModel.mappingValues;\n        mappingValues.push({\n            keyName: '',\n            defaultValue: '',\n            paramMappingSelectEnum: null,\n            mappingMap: []\n        });\n        this.setState({resultModelList});\n    }\n    addMappingMap=()=>{\n        const {resultModel, resultModelList} = this.getResultModelAndList();\n        const mappingValues = resultModel.mappingValues;\n        const item = mappingValues.find(each=>each.keyName === this.state.editingMapKeyName);\n        item.mappingMap.push({\n            source: '',\n            target: ''\n        });\n        this.setState({resultModelList});\n    }\n    deleteMapItem(index){\n        const {resultModel, resultModelList} = this.getResultModelAndList();\n        const mappingValues = resultModel.mappingValues;\n        const item = mappingValues.find(each=>each.keyName === this.state.editingMapKeyName);\n        item.mappingMap.splice(index, 1);\n        this.setState({resultModelList});\n    }\n    mapItemChange=(target, mappingIndex, event)=>{\n        const {resultModel, resultModelList} = this.getResultModelAndList();\n        const mappingValues = resultModel.mappingValues;\n        const val = (event && event.target) ? event.target.value : event;\n        const item = mappingValues.find(each=>each.keyName === this.state.editingMapKeyName);\n        if(mappingIndex === null){\n            item[target] = val;\n        }else{\n            item.mappingMap[mappingIndex][target] = val;\n        }\n        this.setState({resultModelList});\n    }\n    modelIdChange = (modelId)=>{\n        this.getResultModel(modelId);\n        this.setState({modelId})\n    }\n    // fixed value map\n    addFixedValueMap=()=>{\n        const {resultModel, resultModelList} = this.getResultModelAndList();\n        if(Array.isArray(resultModel.fixedValueMap) === false){\n            console.log('fixedValueMap not a array, set it to array');\n            resultModel.fixedValueMap = [];\n        }\n        resultModel.fixedValueMap.push({\n            key: '',\n            value: ''\n        });\n        this.setState({resultModelList});\n    }\n    deleteFixedValueMap=(index)=>{\n        const {resultModel, resultModelList} = this.getResultModelAndList();\n        resultModel.fixedValueMap.splice(index, 1);\n        this.setState({resultModelList});\n    }\n    changeFixedValueMap=(index, keyName, event)=>{\n        const {resultModel, resultModelList} = this.getResultModelAndList();\n        resultModel.fixedValueMap[index][keyName] = event.target.value;\n        this.setState({resultModelList});\n    }\n    render(){\n        const {current} = this.state;\n        const signFields = this.state.fields\n            .filter(field=>field.category==='sign')\n            .map(field=>{\n                return this.makeFormItem(field);\n            });\n        const stepOne = (\n            <div className=\"step step-one\">\n                <Form layout=\"horizontal\">\n                    {signFields}\n                </Form>\n            </div>\n        );\n        const requestFields = this.state.fields\n            .filter(field=>field.category==='request')\n            .map(field=>{\n                return this.makeFormItem(field);\n            });\n        const stepTwo = (\n            <div className=\"step step-two\">\n                <Form layout=\"horizontal\">\n                    {requestFields}\n                </Form>\n            </div>\n        );\n        const cpSourceMap = this.state.cpSourceMap.map(each=>{\n            return <div className=\"item\" onDragStart={this.dragItem.bind(this, each, 'cp-source')} draggable key={each.key} title={each.value + ''}>{each.key}</div>;\n        });\n        const proxyMap = this.state.proxyMap.map((each,index)=>{\n            const valueTypeSelect = (\n                <Select onChange={this.proxyItemChange.bind(this, index, 'valueType')} value={each.valueType}>\n                    <Option value={null}>默认</Option>\n                    <Option value={1} data-name=\"object\">对象</Option>\n                    <Option value={2} data-name=\"list\">列表</Option>\n                </Select>\n            );\n            return (\n                <div className=\"item\" key={index}>\n                    <div className=\"source\">\n                        <Input value={each.rule} placeholder=\"来源表达式\"\n                            onDrop={this.proxyItemDrop.bind(this, index)}\n                            onDragOver={this.preventDragOver}\n                            onChange={this.proxyItemChange.bind(this, index, 'rule')} />\n                    </div>\n                    <div className=\"icon swap-right-icon\"><Icon type=\"right\" /></div>\n                    <InputGroup className=\"target\" compact>\n                        {valueTypeSelect}\n                        <Input value={each.name} placeholder=\"参数名称\"\n                            onChange={this.proxyItemChange.bind(this, index, 'name')} />\n                    </InputGroup>\n                    <Button icon=\"close\" type=\"danger\" onClick={this.deleteProxyItem.bind(this, index)} />\n                </div>\n            );\n        });\n        const resultModel = this.state.resultModelList.find(each=>each.id === this.state.modelId) || {};\n        const model = resultModel.model || [];\n        const modelDataSource = model.map(each=>{\n            return {value: each.name, text: each.desc};\n        });\n        // mappings\n        const mappings = resultModel.mappings || [];\n        const mappingsCPN = mappings.map((each, index)=>{\n            const sourceSelect = (\n                <AutoComplete value={each.keyName || undefined}\n                    showSearch={true}\n                    dataSource={modelDataSource}\n                    placeholder=\"目标参数\"\n                    style={{\"minWidth\": 165}} onChange={this.resultItemChange.bind(this, index, 'keyName')}>\n                </AutoComplete>\n            );\n            return (\n                <div className=\"item\" key={index}>\n                    {sourceSelect}\n                    <Icon type=\"right\" />\n                    <Input value={each.valNames}\n                        placeholder=\"来源数据\"\n                        onChange={this.resultItemChange.bind(this, index, 'valNames')}></Input>\n                    <Tooltip title=\"数据映射\"><Button icon=\"swap\" onClick={this.toggleMapEditor.bind(this, each.keyName)}></Button></Tooltip>\n                    <Tooltip title=\"表达式\"><Button icon=\"code-o\" onClick={this.toggleResultExpressionModal.bind(this, index)}></Button></Tooltip>\n                    <Tooltip title=\"删除\"><Button onClick={this.resultItemDelete.bind(this, index)} type=\"danger\" icon=\"close\" /></Tooltip>\n                </div>\n            );\n        });\n        // fixed value\n        const fixedValue = resultModel && resultModel.fixedValueMap && resultModel.fixedValueMap.map((each,index)=>{\n            return (\n                <div className=\"item\" key={index}>\n                    <Input value={each.key} onChange={this.changeFixedValueMap.bind(this, index, 'key')} placeholder=\"参数名\"></Input>\n                    <Icon type=\"right\" />\n                    <Input value={each.value} placeholder=\"值\" onChange={this.changeFixedValueMap.bind(this, index, 'value')}></Input>\n                    <Tooltip title=\"删除\"><Button onClick={this.deleteFixedValueMap.bind(this, index)} type=\"danger\" icon=\"close\" /></Tooltip>\n                </div>\n            )\n        });\n        // error handle\n        const errorHandle = this.state.fields.filter(field=>{\n            return field.category === 'error-handle';\n        }).map(field=>{\n            return this.makeFormItem(field);\n        });\n        const stepThree = (\n            <div className=\"step step-three\">\n                <div className=\"cp-map\">\n                    {cpSourceMap}\n                </div>\n                <Icon type=\"arrow-right\" />\n                <div className=\"proxy-map\">\n                    <div className=\"list\">\n                        <FormItem label=\"层级属性\" className=\"item proxy-param\">\n                            <Input value={this.state.proxyParam.attributes} onChange={this.proxyParamChange.bind(this, 'attributes')}></Input>\n                        </FormItem>\n                        <FormItem label=\"对应层级\" className=\"item proxy-param\">\n                            <Input value={this.state.proxyParam.baseRule}\n                                onDragOver={this.preventDragOver}\n                                onDrop={this.proxyParamDrop.bind(this, 'baseRule')}\n                                onChange={this.proxyParamChange.bind(this, 'baseRule')}></Input>\n                        </FormItem>\n                        <Divider>错误处理</Divider>\n                        {errorHandle}\n                        <Divider>参数映射</Divider>\n                        {proxyMap}\n                        <div className=\"item\">\n                            <Button icon=\"plus\" className=\"add-proxy-map-item\" onClick={this.addProxyItem} />\n                        </div>\n                    </div>\n                </div>\n                <Icon type=\"arrow-right\" />\n                <div className=\"target-map\">\n                    <FormItem label=\"目标模型\" className=\"inline item\">\n                        <Select value={this.state.modelId} onChange={this.modelIdChange} style={{width: 345}}>\n                            {this.state.resultModelList.map(each=><Option key={each.id} value={each.id}>{each.desc}</Option>)}\n                        </Select>\n                    </FormItem>\n                    <div className=\"item\">\n                        <Divider>固定映射参数</Divider>\n                    </div>\n                    {fixedValue}\n                    <div className=\"item\">\n                        <Button icon=\"plus\" className=\"block\" onClick={this.addFixedValueMap} />\n                    </div>\n                    <div className=\"item\">\n                        <Divider>转换列表</Divider>\n                    </div>\n                    {mappingsCPN}\n                    <div className=\"item\">\n                        <Button icon=\"plus\" className=\"block\" onClick={this.resultMapAdd} />\n                    </div>\n                </div>\n            </div>\n        );\n        // mapping value\n        const mappingValues = resultModel.mappingValues || [];\n        const mappingValue = mappingValues.find(each=>each.keyName === this.state.editingMapKeyName);\n        let mapEditForm;\n        if(mappingValue){\n            const mappingMap = mappingValue.mappingMap.map((each, index)=>{\n                return <div className=\"inline-input\" key={index}>\n                    <Input value={each.source}\n                        onChange={this.mapItemChange.bind(this, 'source', index)}\n                        placeholder=\"来源值\"></Input>\n                    <Icon type=\"right\" />\n                    <Input value={each.target}\n                        onChange={this.mapItemChange.bind(this, 'target', index)}\n                        placeholder=\"目标值\"></Input>\n                    <Tooltip title=\"删除\">\n                        <Button type=\"danger\" icon=\"close\" onClick={this.deleteMapItem.bind(this, index)} />\n                    </Tooltip>\n                </div>\n            });\n            const paramMappingOptions = [\n                    {key: 1, value:'ORIGINAL', name: '原始值'},\n                    {key: 2, value: 'NULL', name: '空值'},\n                    {key: 3, value: 'DEFAULT', name: '默认值'}\n                ].map(each=>{\n                    return <Option key={each.key} value={each.value}>{each.name}</Option>\n            });\n            paramMappingOptions.unshift(<Option key={null} value={null} disabled={true}>请选择</Option>);\n            mapEditForm = (\n                <Form layout=\"horizontal\">\n                    <FormItem label=\"键名\">\n                        <Input value={mappingValue.keyName}\n                            disabled={true}\n                            placeholder=\"keyName\" />\n                    </FormItem>\n                    <FormItem label=\"默认值\">\n                        <Input value={mappingValue.defaultValue}\n                            placeholder=\"key\"\n                            onChange={this.mapItemChange.bind(this, 'defaultValue', null)} />\n                    </FormItem>\n                    <FormItem label=\"参数值\">\n                        <Select value={mappingValue.paramMappingSelectEnum}\n                            onChange={this.mapItemChange.bind(this, 'paramMappingSelectEnum', null)} >\n                            {paramMappingOptions}\n                        </Select>\n                    </FormItem>\n                    <FormItem label=\"数据映射\">\n                        {mappingMap}\n                        <Button icon=\"plus\" className=\"block\" onClick={this.addMappingMap.bind(this)}></Button>\n                    </FormItem>\n                </Form>\n            )\n        }\n        return (\n            <div className=\"cp-api-manage\">\n                <div className=\"steps\">\n                    <Steps current={current}>\n                        <Step title=\"签名配置\" />\n                        <Step title=\"访问配置\" />\n                        <Step title=\"转换配置\" />\n                    </Steps>\n                </div>\n                <div className=\"step-content\">\n                    <Spin spinning={!!this.state.loading}>\n                        {current === 0 && stepOne}\n                        {current === 1 && stepTwo}\n                        {current === 2 && stepThree}\n                        <div className=\"panel\">\n                            <Divider />\n                            <Button.Group className=\"step-button\">\n                                {current !== 0 && <Button onClick={this.previousStep}>上一步</Button>}\n                                {current === 1 && <Button onClick={this.checkGrabApi}>验证访问配置</Button>}\n                                {current === 2 && <Button onClick={this.checkResultModel}>验证转换配置</Button>}\n                                {current !== 2 && <Button onClick={this.nextStep}>下一步</Button>}                    \n                            </Button.Group>\n                            <Divider type=\"vertical\" />\n                            <Button.Group>\n                                {current === 0 && <Button onClick={this.upsertSignSchema}>保存签名配置</Button>}\n                                {current === 1 && <Button onClick={this.saveGrab}>保存访问配置</Button>}\n                                {current === 2 && <Button onClick={this.saveGrabResult}>保存</Button>}\n                                <Button onClick={this.cancel}>取消</Button>\n                            </Button.Group>\n                        </div>\n                    </Spin>\n                </div>\n                <Modal visible={this.state.isMapEditorOpen}\n                    onCancel={this.toggleMapEditor.bind(this, '_cancel')}\n                    onOk={this.toggleMapEditor.bind(this, '_ok')}\n                    closable={false}\n                    className=\"result-mapping-editor-modal\"\n                    title=\"编辑Map\">\n                    {mapEditForm}\n                </Modal>\n                <Modal visible={this.state.isResultExpressionOpen}\n                    title=\"编辑转换表达式\"\n                    className=\"result-express-modal\"\n                    closable={true}\n                    onCancel={this.toggleResultExpressionModal.bind(this, this.state.resultMapEditingIndex, 'cancel')}\n                    footer={<Button type=\"primary\" onClick={this.toggleResultExpressionModal.bind(this, null, 'save')}>保存</Button>}>\n                    <TextArea autosize={{minRows: 5}}\n                        value={this.state.resultMapEditingIndex === null ? '' : mappings[this.state.resultMapEditingIndex].expression}\n                        onChange={this.resultExpressChange} placeholder=\"请输入转换表达式\"></TextArea>\n                </Modal>\n                <Modal visible={this.state.isJsonEditorOpen}\n                    closable={false}\n                    maskClosable={false}\n                    onOk={this.saveJson}\n                    onCancel={this.closeJsonEditor}\n                    title=\"编辑JSON\"\n                    className=\"json-editor-modal\">\n                    <div id=\"json-editor\"></div>\n                </Modal>\n                <Modal visible={this.state.isJsonViewerOpen}\n                    closable={true}\n                    maskClosable={false}\n                    onCancel={this.closeJsonViewer}\n                    width={720}\n                    title=\"查看JSON\"\n                    footer={<Button onClick={this.closeJsonViewer}>关闭</Button>}\n                    className=\"json-viewer-modal\">\n                    <div id=\"json-viewer\"></div>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nconst container = connect()(CPAPIManage);\n\nexport default container;"],"sourceRoot":""}