{"version":3,"sources":["webpack:///./assets/widget/FileUploader.tsx","webpack:///./assets/component/form/CrawlInput.tsx","webpack:///./assets/lib/saveImage.ts","webpack:///./assets/action/submitForm.ts","webpack:///./assets/component/Modal/EditFormModal.tsx","webpack:///./common/URL.js"],"names":["__webpack_require__","URI","FileUploader","Object","es","state","props","table","formFields","fields","dispatch","setTableValue","key","value","type","setFieldsValue","react","[object Object]","super","this","handleChange","info","__awaiter","fileList","field","keyName","i","length","file","status","response","message","error","name","Error","code","JSON","stringify","url","reInvoke","invokeDef","apiUri","api","argMap","forEach","map","val","source","setQuery","rdUri","API","serverRequest","toString","res","ajax","get","push","assign","handleCancel","setState","previewVisible","handlePreview","previewImage","thumbUrl","loading","fieldType","each","uploadButton","quota","es_button","icon","className","uploadType","accept","includes","upload","action","reUploadImage","listType","multiple","onPreview","onChange","modal","visible","footer","onCancel","style","width","src","shortId","input","Search","form_CrawlInput","tableFields","crawl","CrawlInput_awaiter","isLoading","loadingTime","intervalIndex","setInterval","stopLoading","post","crawlUrl","setFieldValue","author","content","parse","find","_key","generate","reducer","title","imgMap","img","uid","id","keywords","join","success","event","target","clearInterval","inputProps","onPressEnter","marginRight","btnProps","float","onClick","display","b64ToBlob","isBase64Reg","isBlobReg","uploadFile","Promise","resolve","xhr","XMLHttpRequest","onload","responseText","fd","FormData","open","append","send","saveImage","imgUrl","console","log","isBase64","test","isBlob","b64Url","contentType","match","ext","fileName","Date","now","imgBlob","replace","imgFile","File","lastModified","uploadBase64","blobUrl","responseType","getResponseHeader","blob","downloadBlobUrl","submitForm_URI","submitForm","validate","isEditing","contentEditModal","options","primaryField","isPrimaryKey","upsertConfig","updateConfig","addConfig","preData","payload","payloadFields","updateRes","dbName","tableName","confirmLoading","notShowWhenUpdate","newByField","targetField","targetProperty","foundOption","op","notShowWhenNew","isSentEvenEmpty","isAutoGen","isForceSend","uneditable","isNotSend","valueType","Array","isArray","handy","transferIndexToBit","trim","toHTML","template","document","createElement","innerHTML","imgEls","querySelectorAll","imgEl","getAttribute","warn","srcUri","srcUriQuery","query","srcProtocol","protocol","imgW","imgH","height","setAttribute","saveRes","imgUrlQuery","templateHtml","allUrl","isValuePath","applyObjByPath","apiConfig","updateTableRow","enctype","isRedirect","reqUri","args","reject","method","headers","entries","undefined","encodeURIComponent","setRequestHeader","onerror","evt","invoke","toggleModal","freshList","informServer","call","EditFormModal_shortId","Moment","SYSTEM","defaultPNG","TIME_FORMAT","urlVersion","FormItem","es_form","Item","Option","es_select","EditFormModal_container","freshTableList","bind","modalName","isEdited","format","percent","size","optionFilter","primaryValue","isRequired","isEmpty","isNaN","isUnique","keyValue","getByKeyName","duplicate","filter","beforeSubmit","actionDef","miscellaneous","editingContent","showFields","hideWhenEdit","isShow","sort","a","b","formOrder","index","formItemProps","el","elProps","readonly","readonlyWhenEdit","disabled","placeholder","TextArea","row","fieldChange","OFKeyName","OFValue","eachOption","transferIntToBitIndex","mode","option","imgProp","beProps","media","allowPasteImage","image","dist_default","inputName","timeType","timeProp","showTime","date_picker","rateProps","allowHalf","rate","label","extraButtons","buttons","buttonDef","buttonProp","actionName","buttonActions","tempName","editModalWidth","footerButtons","submit","order","disabledIfNotEdited","extraEditButtons","concat","def","modalTitle","isOpen","maskClosable","layout","__webpack_exports__","module","exports","userLogin","userLogout","getUserInfo","refreshUserToken","imageUpload","redirectCpContent"],"mappings":"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","file":"js/35.bundle.js","sourcesContent":["import * as React from 'react';\nimport {connect} from 'react-redux';\nimport {Upload,\n    Icon,\n    Modal,\n    Button,\n    message\n} from 'antd';\nimport handy from '../lib/handy';\nimport ajax from '../lib/ajax';\nimport API from '../const/API';\nconst shortid = require('shortid');\nconst URI = require('urijs');\nclass ImageUploader extends React.Component<any, any>{\n    constructor(props){\n        super(props);\n        this.state = {\n            previewVisible: false,\n            loading: false\n        };\n    };\n    handleChange = async (info) => {\n        // console.log('info: ,', info);\n        const fileList = [];\n        const field = this.props.field;\n        const keyName = field.keyName;\n        for(let i = 0; i < info.fileList.length; i++){\n            const file = info.fileList[i];\n            if(file.status === 'done'){\n                // make file url property is the real store value\n                if(file.response){\n                    if(file.response.code === 200){\n                        file.url = file.response.value;\n                    }else{\n                        message.error('文件(' + file.name + ')保存失败：' + file.response.message);\n                        throw new Error('upload file error: ' + JSON.stringify(file));\n                    }\n                }else{\n                    message.error(`上传文件(${file.name})失败`);\n                    throw new Error('can not upload file.');\n                }\n                if(field.reInvoke){\n                    const invokeDef = field.reInvoke;\n                    const apiUri = new URI(invokeDef.api);\n                    invokeDef.argMap.forEach(map=>{\n                        let val = '';\n                        if(map.value){\n                            val = map.value;\n                        }else if(map.source){\n                            val = file[map.source];\n                        }\n                        apiUri.setQuery(map.keyName, val);\n                    });\n                    const rdUri = new URI(API.serverRequest.url);\n                    rdUri.setQuery('url', apiUri.toString());\n                    const res = await ajax.get(rdUri);\n                    if(res.code === 200){\n                        file.url = res.value;\n                    }else{\n                        message.error('获取文件地址失败，java服务器返回信息：' + res.message);\n                        return;\n                    }\n                }\n            }\n            fileList.push(Object.assign({}, file));\n        }\n        await this.props.setFieldsValue(keyName, fileList);\n        this.props.setTableValue('isEdited', true);\n    };\n    handleCancel=()=>{\n        this.setState({ previewVisible: false });\n    }\n    handlePreview=(file)=>{\n        // console.log('file preview: ', file);\n        let previewImage = file.url || file.thumbUrl;\n        if(file.response && file.response.code === 200 && file.response.value){\n            previewImage = file.response.value;\n        }\n        this.setState({\n          previewImage,\n          previewVisible: true,\n        });\n    }\n    render(){\n        const field = this.props.field;\n        const keyName = field.keyName;\n        const fieldType = field.type;\n        const fileList = (this.props.formFields[keyName] || []).map(each=>{\n            each.type = 'image';\n            return each;\n        });\n        // console.log('render: ',fileList);\n        let uploadButton:JSX.Element;\n        if(fileList.length !== (field.quota || 1)){\n            if(fieldType === 'file'){\n                uploadButton = (\n                    <Button><Icon type=\"upload\" /> 上传文件</Button>\n                );\n            }else{\n                uploadButton = (\n                    <div>\n                      <Icon type=\"plus\" />\n                      <div className=\"ant-upload-text\">上传</div>\n                    </div>\n                );\n            }\n        }\n        let uploadType:'text'|'picture-card'|'picture' = 'text';\n        let accept = field.accept || '';\n        if(['image', 'images'].includes(fieldType)){\n            uploadType = 'picture-card';\n            accept = 'image/*';\n        }\n        // console.log('fileList: ', fileList);\n        // console.log('listType: ', uploadType);\n        return (\n            <div className=\"clearfix image-uploader\">\n                <Upload\n                    accept={accept}\n                    action={API.reUploadImage.url}\n                    listType={uploadType}\n                    fileList={fileList}\n                    multiple={false}\n                    onPreview={this.handlePreview}\n                    // onRemove={this.remove}\n                    onChange={this.handleChange}>\n                    {uploadButton}\n                </Upload>\n                <Modal visible={this.state.previewVisible} footer={null} onCancel={this.handleCancel}>\n                    {fieldType === 'file' ? this.state.previewImage : <img style={{ width: '100%' }} src={this.state.previewImage} />}\n                </Modal>\n            </div>\n        );\n    }\n}\n// export default ImageUploader;\nconst mapStateToProps = function(state){\n    let props = state.table;\n    props.formFields = state.fields;\n    return props;\n}\nconst mapDispatchToProps = function(dispatch){\n    return {\n        setTableValue: (key, value)=>{dispatch({type: 'table.setValue', key, value})},\n        setFieldsValue: (key, value)=>{dispatch({type: 'fields.setValue', key, value})},\n    }\n}\nconst container:any = connect(mapStateToProps, mapDispatchToProps)(ImageUploader);\nexport default container;","import * as React from 'react';\nimport {connect} from 'react-redux';\nimport {\n    Input,\n    Icon,\n    Button,\n    Row,\n    Col,\n    message\n} from 'antd';\nimport store from '../../reducer';\nimport ajax from '../../lib/ajax';\nimport API from '../../const/API';\nconst shortId = require('shortid');\nconst Search = Input.Search;\nclass CrawlInput extends React.Component<any, any>{\n    constructor(props){\n        super(props);\n        this.state = {\n            url: '',\n            isLoading: false,\n            loadingTime: 0\n        }\n    }\n    setFieldValue(keyName, value){\n        store.dispatch({\n            type: 'fields.setValue',\n            key: keyName,\n            value\n        });\n    }\n    stopLoading(intervalIndex){\n        clearInterval(intervalIndex);\n        this.setState({\n            isLoading: false\n        });\n    }\n    crawl = async () => {\n        this.setState({\n            isLoading: true,\n            loadingTime: 60\n        });\n        const intervalIndex = setInterval(() => {\n            if(this.state.isLoading){\n                if(this.state.loadingTime){\n                    this.setState({\n                        loadingTime: (this.state.loadingTime - 1)\n                    });\n                }else{\n                    this.stopLoading(intervalIndex);\n                }\n            }else{\n                this.stopLoading(intervalIndex);\n            }\n        }, 1000);\n        const res = await ajax.post(API.crawlUrl.url, {\n            url: this.state.url\n        });\n        if(res.code === 200){\n            // set field value\n            const info = res.value;\n            this.setFieldValue('author', info.author);\n            this.setFieldValue('content', info.content);\n            // change _key, so wysiwyg can update content\n            const fields = JSON.parse(JSON.stringify(this.props.tableFields));\n            const contentField = fields.find(field=>field.keyName === 'content');\n            contentField._key = shortId.generate();\n            store.dispatch({\n                type: 'table.setValue',\n                key: 'fields',\n                value: fields\n            });\n            this.setFieldValue('title', info.title);\n            this.setFieldValue('contentTitle', info.title);\n            this.setFieldValue('cpSource', info.source);\n            this.setFieldValue('imgUrls', info.imgMap.map(img=>{\n                img.uid = shortId.generate();\n                img.name = img.id;\n                img.status = 'done';\n                img.thumbUrl = img.url;\n                return img;\n            }));\n            this.setFieldValue('keywords', info.keywords.join(','));\n            message.success('抓取成功');\n        }else{\n            message.error(res.message);\n        }\n        this.setState({\n            isLoading: false\n        });\n    }\n    onChange = (event) => {\n        this.setState({\n            url: event.target.value\n        });\n    }\n    render(){\n        const inputProps:any = {};\n        inputProps.onPressEnter = this.crawl;\n        inputProps.onChange = this.onChange;\n        inputProps.style = {marginRight: '8px'};\n        const btnProps:any = {};\n        btnProps.style = {float: 'right'};\n        btnProps.onClick = this.crawl;\n        btnProps.loading = this.state.isLoading;\n        btnProps.type = 'primary';\n        return (\n            <div style={{display: 'flex'}}>\n                <Input {...inputProps} />\n                <Button {...btnProps}>{this.state.isLoading ? ` ${this.state.loadingTime} ` : '抓取'}</Button>\n            </div>\n        )\n    }\n};\nconst mapState = function(state){\n    const props = {\n        formFields: state.fields,\n        tableFields: state.table.fields\n    };\n    return props;\n}\nexport default connect(mapState)(CrawlInput);","import ajax from './ajax';\nimport API from '../const/API';\nconst b64ToBlob = require('b64-to-blob');\nconst isBase64Reg = /^data:(image\\/\\w{1,5});base64,/;\nconst isBlobReg = /^blob:/;\nconst uploadFile = function(file){\n    return new Promise(resolve=>{\n        const xhr = new XMLHttpRequest();\n        xhr.onload = ()=>{\n            const res = JSON.parse(xhr.responseText);\n            resolve(res);\n        }\n        const fd = new FormData();\n        xhr.open('POST', API.reUploadImage.url);\n        fd.append('file', file);\n        xhr.send(fd);\n    });\n}\nconst uploadBase64 = function(b64Url){\n    return new Promise(resolve=>{\n        const matches = b64Url.match(isBase64Reg);\n        // console.log('match: ', matches);\n        const contentType = matches[1];\n        const ext = contentType.match(/\\/(.*)/)[1];\n        const fileName = Date.now() + '.' + ext;\n        const imgBlob = b64ToBlob(b64Url.replace(isBase64Reg, ''), contentType);\n        // console.log('upload base64 image: ' + fileName);\n        const imgFile = new File([imgBlob], fileName, {type: contentType, lastModified: Date.now()});\n        resolve(uploadFile(imgFile));\n    });\n};\nconst downloadBlobUrl = function(blobUrl){\n    return new Promise(resolve=>{\n        const xhr = new XMLHttpRequest();\n        xhr.open('GET', blobUrl);\n        xhr.responseType = 'blob';\n        xhr.onload = function(){\n            if(this.status === 200){\n                const contentType = xhr.getResponseHeader(\"Content-Type\");\n                const ext = contentType.match(/\\/(.*)/)[1];\n                const fileName = Date.now() + '.' + ext;\n                const blob = this.response;\n                const file = new File([blob], fileName, {type: contentType, lastModified: Date.now()});\n                resolve(file);\n            }\n        }\n        xhr.send();\n    });\n}\nexport default async function(imgUrl){\n    console.log('save img url: ', imgUrl);\n    const isBase64 = isBase64Reg.test(imgUrl);\n    const isBlob = isBlobReg.test(imgUrl);\n    if(isBase64){\n        return await uploadBase64(imgUrl);\n    }else if(isBlob){\n        const imgFile = await downloadBlobUrl(imgUrl);\n        return await uploadFile(imgFile);\n    }else{\n        return await ajax.post(API.saveImage.url, {\n            imgUrl\n        });\n    }\n}","/**\n * EditFormModal submit function\n */\nimport {\n    message\n} from 'antd';\nimport saveImage from '../lib/saveImage';\nimport handy from '../lib/handy';\nimport API from '../const/API';\nimport ajax from '../lib/ajax';\nimport informServer from '../action/informServer';\nconst URI = require('urijs');\nexport default async function () {\n    const isValid = await this.validate();\n    if (!isValid) {\n        return;\n    }\n    const isEditing = this.props.contentEditModal.options.isEditing;\n    const fields = this.props.fields;\n    const primaryField = fields.find(field => field.isPrimaryKey === true);\n    const upsertConfig = primaryField.upsertConfig;\n    const updateConfig = primaryField.updateConfig;\n    const addConfig = primaryField.addConfig;\n    const preData = this.props.formFields;\n    console.log('submit data: ', preData);\n    // arrange post data\n    const payload: any = {};\n    let payloadFields;\n    if (upsertConfig || updateConfig || addConfig) {\n        // console.log('update config : ', upsertConfig);\n        payloadFields = payload;\n    } else {\n        payload.fields = {};\n        payload.dbName = this.props.dbName;\n        payload.tableName = this.props.tableName;\n        payloadFields = payload.fields;\n    }\n    // const keys = Object.keys(preData);\n    // console.log('preData: ', preData);\n    // console.log('keys: ', keys);\n    this.setState({\n        confirmLoading: true\n    });\n    // prepare data\n    for (const field of this.props.fields) {\n        const key = field.keyName;\n        let value = preData[key];\n        if (!field) {\n            console.log('can not find this field: ' + key);\n            continue;\n        }\n\n        if(['create-time','update-time'].includes(field.type)){\n            // don't sent these field to server\n            continue;\n        }\n\n        if (isEditing) {\n            if(field.notShowWhenUpdate){\n                continue;\n            }\n        }else{\n            if(field.newByField){\n                const targetField = this.props.fields.find(each=>each.keyName === field.newByField.keyName);\n                if(!targetField){\n                    throw new Error('can not find \"newByField\" target field.');\n                }\n                if(field.newByField.targetProperty){\n                    if(targetField.type !== 'select'){\n                        throw new Error('if you set \"targetProperty\", than the target field must be a \"select\" type.');\n                    }\n                    const foundOption = targetField.options.find(op=>op.value === preData[targetField.keyName]);\n                    if(foundOption){\n                        value = foundOption[field.newByField.targetProperty];\n                    }\n                }\n            }else if(field.notShowWhenNew){\n                continue;\n            }\n        }\n        if (!value && field.isSentEvenEmpty && typeof value !== 'number') {\n            // console.log('send even empty: ', field.keyName);\n            payloadFields[key] = '';\n            continue;\n        }\n        if (field.isAutoGen) {\n            if (!value) {\n                continue;\n            }\n        }\n        // Some fields like viewed-count, hot-rate etc can not be edited.\n        // These fields won't show on edit form and won't send to server for updating nor inserting.\n        // Notice that readonly field will be shown on edit form and it will be sent to server, they are different.\n        if (field.isForceSend) {\n            // some fields like id no matter how, just send it.\n        } else if (field.uneditable) {\n            continue;\n        } else if (field.isNotSend) {\n            continue;\n        }\n        // readonly will send as well, if you don't want to send it, use isNotSend\n        // if(field.readonly === true){\n        //     continue;\n        // }\n        if (value instanceof File) {\n            continue;\n        }\n        if(field.valueType === 'bit'){\n            if(Array.isArray(value)){\n                value = handy.transferIndexToBit(value);\n            }\n        }\n        if (typeof value === 'string') {\n            value = value.trim();\n        }\n        if (field.type === 'wysiwyg') {\n            value = value.toHTML();\n            const template = document.createElement('template');\n            template.innerHTML = value;\n            const temEl = template.content;\n            const imgEls: any = temEl.querySelectorAll('img');\n            for (const imgEl of imgEls) {\n                const src = imgEl.src || imgEl.getAttribute('data-src');\n                if (!src) {\n                    console.warn('can not find image in content img src.');\n                    continue;\n                }\n                if (/^file:/.test(src)) {\n                    message.error('由于浏览器的安全保护机制，目前不能直接上传本地文件。');\n                    continue;\n                }\n                const srcUri = new URI(src);\n                const srcUriQuery = srcUri.query(true);\n                const srcProtocol = srcUri.protocol();\n                // console.log('src protocol: ' + srcProtocol);\n                // meizu image no need to upload again\n                if (!['blob', 'data'].includes(srcProtocol)) {\n                    if(/(\\.mzres\\.)|(\\.meizu\\.)/.test(src)){\n                        // set image width and height\n                        // console.log('this is mz source.');\n                        const imgW = imgEl.width;\n                        const imgH = imgEl.height;\n                        if (!imgW || !imgH) {\n                            const width = srcUriQuery.width;\n                            const height = srcUriQuery.height;\n                            if (width) {\n                                imgEl.setAttribute('width', width);\n                            }\n                            if (height) {\n                                imgEl.setAttribute('height', height);\n                            }\n                        }\n                    }else{\n                        const res = await ajax.post(API.saveImage.url, {\n                            imgUrl: src\n                        });\n                        if(res.code === 200){\n                            // replace src\n                            imgEl.setAttribute('src', res.value);\n                        }\n                    }\n                    continue;\n                }\n                // saveImage function can deal with almost all type of image, base64, blob, http etc.\n                const saveRes = await saveImage(src);\n                if (saveRes.code === 200) {\n                    if (saveRes.value) {\n                        console.log('replace src: ' + saveRes.value);\n                        const imgUrl = new URI(saveRes.value);\n                        const imgUrlQuery = imgUrl.query(true);\n                        const width = imgUrlQuery.width;\n                        const height = imgUrlQuery.height;\n                        imgEl.setAttribute('width', width);\n                        imgEl.setAttribute('height', height);\n                        imgEl.setAttribute('src', saveRes.value);\n                    } else {\n                        console.error('server response img without value, please check what happened.');\n                    }\n                }\n            }\n            const templateHtml = template.innerHTML;\n            console.log('html: ', templateHtml);\n            // value = value.replace(/\\s?style=\"[^\"]*\"/g, '');\n            payloadFields[key] = templateHtml;\n        } else if (['image', 'images', 'file'].includes(field.type)) {\n            if (!value) {\n                continue;\n            }\n            if (Array.isArray(value) === false) {\n                value = [value];\n            }\n            const allUrl = [];\n            for (const file of value) {\n                if (file) {\n                    // console.log(file);\n                    allUrl.push(file.url);\n                } else {\n                    throw new Error('找不到上传的文件');\n                }\n            }\n            if (handy.isValuePath(field.keyName)) {\n                handy.applyObjByPath(payloadFields, field.keyName, allUrl.join(','));\n            } else {\n                payloadFields[key] = allUrl.join(',');\n            }\n        } else if (typeof value === 'string' || typeof value === 'number') {\n            if (handy.isValuePath(field.keyName)) {\n                handy.applyObjByPath(payloadFields, field.keyName, value);\n            } else {\n                payloadFields[key] = value;\n            }\n        }\n    }\n\n    // console.log('payload: ', payload);\n    // payload.keyName = this.primaryField.keyName;\n    // payload.keyValue = this.props.formFields[this.primaryField.keyName];\n    // console.log('payload: ', payload);\n    let updateRes;\n    const invoke = function (args: any) {\n        console.log('invoke args: ', args);\n        return new Promise((resolve, reject) => {\n            const xhr = new XMLHttpRequest();\n            xhr.open(args.method, args.url);\n            const headers = args.headers || {};\n            headers['X-Requested-With'] = 'XMLHttpRequest';\n            const enctype = args.enctype || 'json';\n            let payload;\n            if (/urlencoded/i.test(enctype)) {\n                headers['content-type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n                if (args.payload) {\n                    payload = Object.entries(args.payload).map(([key, value]) => {\n                        if ([undefined, null].includes(value)) {\n                            value = '';\n                        }\n                        if (Array.isArray(value)) {\n                            return value.map(val => `${key}=${encodeURIComponent(val + '')}`).join('&');\n                        } else {\n                            if (typeof value === 'string') {\n                                value = value.trim();\n                            }\n                            return `${key}=${encodeURIComponent(value + '')}`\n                        }\n                    }).join('&');\n                    // console.log(payload);\n                }\n            } else {\n                headers['content-type'] = 'application/json; charset=UTF-8';\n                if (args.payload) {\n                    payload = JSON.stringify(args.payload);\n                }\n            }\n            Object.entries(headers).forEach(([key, value]) => {\n                xhr.setRequestHeader(key, value + '');\n            });\n            xhr.onload = () => {\n                const res = JSON.parse(xhr.responseText);\n                resolve(res);\n            };\n            xhr.onerror = (evt) => {\n                reject(evt);\n            }\n            xhr.send(payload);\n        });\n    };\n    let url = API.updateTableRow.url;\n    let enctype = 'json';\n    let isRedirect = false;\n    let apiConfig;\n    if (isEditing) {\n        apiConfig = updateConfig || upsertConfig;\n    } else {\n        apiConfig = addConfig;\n    }\n    if(apiConfig){\n        url = apiConfig.api;\n        isRedirect = apiConfig.isRedirect || isRedirect;\n        enctype = apiConfig.enctype || enctype;\n    }\n    if (isRedirect) {\n        const reqUri = new URI(API.serverRequest.url);\n        reqUri.setQuery('url', url);\n        url = reqUri.toString();\n    }\n    try {\n        updateRes = await invoke({\n            url,\n            method: 'POST',\n            payload,\n            enctype: enctype\n        });\n    } catch (error) {\n        console.error(error);\n        message.error('保存失败，服务器发生错误');\n    }\n    this.setState({ confirmLoading: false });\n    // console.log('res: ', updateRes);\n    if (!updateRes) {\n        return;\n    }\n    if (updateRes.code === 200) {\n        message.success('保存成功');\n        this.toggleModal();\n        this.freshList();\n        informServer.call(this);\n    } else {\n        message.error('保存失败：' + updateRes.message);\n    }\n}","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport Loadable from 'react-loadable';\nimport ajax from '../../lib/ajax';\nimport handy from '../../lib/handy';\nimport API from '../../const/API';\nimport {\n    Form,\n    message,\n    Modal,\n    Input,\n    Select,\n    DatePicker,\n    Rate,\n    Upload,\n    Icon,\n    Button\n} from 'antd';\nimport cache from '../../lib/cache';\nimport FileUploader from '../../widget/FileUploader';\nimport freshTableList from '../../action/freshTableList';\nimport BraftEditor, { EditorState } from 'braft-editor';\nimport CrawlInput from '../form/CrawlInput';\nimport buttonActions from '../../action/buttonActions';\nimport miscellaneousActions from '../../action/miscellaneous';\nimport submitForm from '../../action/submitForm';\nconst shortId = require('shortid');\nconst URI = require('urijs');\nconst Moment = require('moment');\nconst SYSTEM = require('../../../common/SYSTEM.js');\nconst defaultPNG = require('../../img/default.jpg');\nconst URL_DEF = require('../../../common/URL.js');\nconst urlPrefix = '/' + SYSTEM.urlVersion.value;\nconst TIME_FORMAT = 'YYYY-MM-DD HH:mm:ss';\nconst FormItem = Form.Item;\nconst Option = Select.Option;\ninterface STATE {\n    confirmLoading: boolean\n}\nclass EditFormModal extends React.Component<any, STATE>{\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            confirmLoading: false\n        };\n    }\n    freshList: any = this.props.freshList || freshTableList.bind(this);\n    toggleModal() {\n        if (this.state.confirmLoading) {\n            message.info('正在上传数据，请稍候...');\n            return;\n        }\n        this.props.dispatch({\n            type: 'modal.toggle',\n            modalName: 'contentEditModal'\n        });\n    }\n    async fieldChange(field, event) {\n        // console.log('event: ', event);\n        // console.log('field: ', field);\n        if(!this.props.isEdited){\n            this.props.dispatch({\n                type: 'table.setValue',\n                value: {\n                    isEdited: true\n                }\n            });\n        }\n        let val = event;\n        const keyName = field.keyName;\n        if (!keyName) {\n            return;\n        }\n        if (event) {\n            if (event.target && event.target.value !== undefined) {\n                val = event.target.value;\n            }\n        }\n        if (field.type === 'wysiwyg') {\n            // console.log(val);\n            // console.log(val.toHTML());\n            this.props.setFieldsValue(keyName, val);\n        } else if (val instanceof Moment) {\n            // 2018-04-22 00:00:00\n            val = val.format(TIME_FORMAT);\n        } else if (val && val.fileList) {\n            val = {};\n            val.fileList = event.fileList.map(file => {\n                const each: any = {};\n                each.name = file.name;\n                each.uid = shortId.generate();\n                each.status = file.status;\n                each.percent = file.percent;\n                each.type = file.type;\n                each.size = file.size;\n                if (file.response) {\n                    each.url = file.response.value;\n                }\n                return each;\n            });\n        }\n        // if some field options has filter with this value, set that field value to empty\n        for(const each of this.props.fields){\n            if(each.optionFilter){\n                if(each.optionFilter === keyName){\n                    this.props.setFieldsValue(each.keyName, undefined);\n                    break;\n                }\n            }\n        }\n        this.props.setFieldsValue(keyName, val);\n    }\n    async validate() {\n        const primaryField = this.props.fields.find(field => field.isPrimaryKey === true);\n        const primaryValue = this.props.formFields[primaryField.keyName];\n        for (const field of this.props.fields) {\n            let value = this.props.formFields[field.keyName];\n            const valueType = typeof value;\n            // console.log('name: ', field.name);\n            // console.log('value: ', value);\n            if (field.uneditable) {\n                continue;\n            }\n            if (field.isRequired) {\n                if (['', [], null, undefined].includes(value)) {\n                    message.error(field.name + ' 不能为空');\n                    return false;\n                }\n                if (['file', 'image', 'images'].includes(field.type)) {\n                    if (!value || value.length === 0) {\n                        console.log('upload files: ', value);\n                        message.error(field.name + ' 至少要上传一个文件');\n                        return false;\n                    }\n                }\n            }\n            if (field.valueType === 'number' && handy.isEmpty(value) === false) {\n                value = +value;\n                if (isNaN(value)) {\n                    message.error(field.name + ' 为数字类型');\n                    return false;\n                }\n            } else if (valueType === 'string') {\n                value = value.trim();\n            }\n            if (field.isUnique) {\n                const keyName = field.keyName;\n                const keyValue = value;\n                const res = await ajax.get(API.getByKeyName.url, {\n                    dbName: this.props.dbName,\n                    tableName: this.props.tableName,\n                    keyName,\n                    keyValue\n                });\n                if (res.value && res.value.length) {\n                    const duplicate = res.value.filter(each => each[primaryField.keyName] !== primaryValue);\n                    if (duplicate.length) {\n                        message.error(field.name + ' 必须唯一');\n                        return false;\n                    }\n                    console.log(duplicate);\n                }\n            }\n        }\n        return true;\n    }\n    async submit() {\n        // execute function before submit\n        const primaryField = this.props.fields.find(each => each.isPrimaryKey);\n        if (primaryField.beforeSubmit) {\n            const actionDef = miscellaneousActions.find(each => each.name === primaryField.beforeSubmit);\n            if (actionDef) {\n                await actionDef.action.call(this);\n            }\n        }\n        // submit\n        submitForm.call(this);\n    }\n    render() {\n        const fields = this.props.fields;\n        const primaryField = fields.find(field => field.isPrimaryKey);\n        // console.log(fields);\n        // editing mean editing individual row, not adding a new row\n        const isEditing = this.props.contentEditModal.options.isEditing; // this value can not be empty\n        // console.log('is editing: ', isEditing);\n        const editingContent = this.props.formFields;\n        let showFields = fields.filter(each => {\n            // not show\n            if (['update-time',\n                'create-time',\n                'dropdown-button',\n                'button'\n            ].includes(each.type)) {\n                return false;\n            }\n            // not show\n            if (isEditing) {\n                if (each.notShowWhenUpdate) {\n                    return false;\n                }\n            } else {\n                if (each.notShowWhenNew) {\n                    return false;\n                }\n            }\n            if (each.uneditable === true) {\n                return false;\n            }\n            if (isEditing) {\n                if (each.hideWhenEdit) {\n                    return false;\n                }\n            } else {\n                if (each.isAutoGen) {\n                    return false;\n                }\n            }\n            if (each.isShow) {\n                if(typeof each.isShow === 'boolean'){\n                    return each.isShow;\n                }\n                const val = this.props.formFields[each.isShow.keyName];\n                // console.log('is show: ', val);\n                // console.log('key : ' + each.isShow.keyName);\n                if (each.isShow.value === val) {\n                    return true;\n                } else if (each.isShow.value === 'empty') {\n                    return !val;\n                } else {\n                    return false;\n                }\n            }\n            return true;\n        });\n        showFields = showFields.sort((a, b) => {\n            if (b.formOrder === undefined) {\n                return -1;\n            }\n            if (a.formOrder === undefined) {\n                return 1;\n            }\n            return a.formOrder - b.formOrder;\n        });\n        // console.log('show fields: ', JSON.stringify(showFields));\n\n        const formFields = showFields.map((field, index) => {\n            // don't puluted \n            field = JSON.parse(JSON.stringify(field));\n            const formItemProps: any = {};\n            const keyName = field.keyName;\n            let value = editingContent[keyName];\n            // value = editingContent[keyName];\n            let el;\n            let elProps: any = {};\n            if (field.readonly || (isEditing && field.readonlyWhenEdit)) {\n                elProps.disabled = true;\n            }\n            field.placeholder && (elProps.placeholder = field.placeholder);\n            if (field.type === 'textarea') {\n                const { TextArea } = Input;\n                el = <TextArea {...elProps} row={4} value={value} onChange={this.fieldChange.bind(this, field)} />;\n            } else if (field.type === 'select') {\n                if(field.optionFilter){\n                    // console.log('options: ' + JSON.stringify(field.options));\n                    const OFKeyName = field.optionFilter;\n                    const OFValue = editingContent[OFKeyName];\n                    // console.log(OFKeyName);\n                    // console.log(OFValue);\n                    if(OFValue === undefined){\n                        field.options = [];\n                    }else{\n                        field.options = field.options.filter(eachOption=>{\n                            // console.log('each option: ',eachOption);\n                            return eachOption.row[OFKeyName] === OFValue;\n                        });\n                        // console.log(field.options);\n                    }\n                }\n                if (field.valueType === 'bit') {\n                    if(Array.isArray(value) === false){\n                        value = handy.transferIntToBitIndex(value);\n                    }\n                }\n                if (field.mode === 'multiple') {\n                    elProps.mode = 'multiple';\n                } else {\n                    const foundOption = field.options.find(option => option.value === value);\n                    if (!foundOption) {\n                        value = undefined;\n                    }\n                }\n                let options = field.options.filter(option => {\n                    if (field.mode === 'multiple') {\n                        if (value.includes(option.value)) {\n                            return true;\n                        }\n                    }\n                    if (option.value === value) {\n                        return true;\n                    }\n                    return !option.hideWhenEdit\n                }).map(option => <Option key={option.value} value={option.value}>{option.name}</Option>);\n                !elProps.placeholder && (elProps.placeholder = '请选择');\n                el = <Select {...elProps} onChange={this.fieldChange.bind(this, field)} value={value}>{options}</Select>;\n            } else if (['image', 'images', 'file'].includes(field.type)) {\n                // console.log('image value: ', value);\n                if (field.readonly === true) {\n                    const imgProp: any = {\n                        style: { width: 100, height: 100 }\n                    };\n                    if (Array.isArray(value) && value.length) {\n                        imgProp.src = value[0].url;\n                    } else {\n                        imgProp.src = defaultPNG;\n                    }\n                    el = <img {...imgProp} />;\n                } else {\n                    el = <FileUploader field={field} value={value} />\n                }\n            } else if (field.type === 'wysiwyg') {\n                const beProps = {\n                    onChange: this.fieldChange.bind(this, field),\n                    height: 300,\n                    value: value,\n                    media: {\n                        allowPasteImage: true,\n                        image: true\n                    },\n                };\n                el = <BraftEditor {...beProps} {...elProps} />\n            } else if (field.type === 'field-button') {\n                if (field.inputName === 'CrawlInput') {\n                    el = <CrawlInput />\n                } else {\n                    throw new Error('Have not implement this input type: ' + field.type);\n                }\n            } else if (field.type === 'date') {\n                if (value) {\n                    if (field.timeType === 'unix-time') {\n                        value = new Moment(value);\n                    } else {\n                        value = new Moment(value, TIME_FORMAT);\n                    }\n                }\n                const timeProp: any = {};\n                timeProp.showTime = true;\n                timeProp.format = TIME_FORMAT;\n                timeProp.placeholder = '点击选择时间';\n                timeProp.onChange = this.fieldChange.bind(this, field);\n                timeProp.style = { width: 280 };\n                timeProp.value = value;\n                if (field.readonly === true) {\n                    timeProp.disabled = true;\n                }\n                el = <DatePicker {...timeProp}></DatePicker>;\n            } else if (field.type === 'rate') {\n                const rateProps: any = {};\n                if (field.allowHalf) {\n                    rateProps.allowHalf = true;\n                }\n                rateProps.value = value;\n                rateProps.onChange = this.fieldChange.bind(this, field);\n                el = <Rate {...rateProps}></Rate>;\n            } else {\n                // default behavior\n                el = <Input onChange={this.fieldChange.bind(this, field)} {...elProps} value={value} />;\n            }\n            formItemProps.label = field.name;\n            formItemProps.key = field._key || keyName;\n            // it is ugly\n            // if(field.isRequired){\n            //     formItemProps.required = true;\n            // }\n            let extraButtons = '';\n            if (Array.isArray(field.buttons)) {\n                extraButtons = field.buttons.map(buttonDef => {\n                    const buttonProp: any = {\n                        key: buttonDef.actionName\n                    };\n                    // console.log('button def: ', buttonDef);\n                    const actionDef = buttonActions.find(each => each.name === buttonDef.actionName);\n                    // console.log('actionDef: ', actionDef);\n                    if (actionDef) {\n                        buttonProp.onClick = actionDef.action.bind(this, field);\n                    }\n                    if (buttonDef.isLoading) {\n                        buttonProp.loading = true;\n                        buttonProp.disabled = true;\n                    }\n                    const name = buttonDef.tempName || buttonDef.name;\n                    if (!name) {\n                        buttonProp.icon = buttonDef.icon;\n                        return <Button {...buttonProp} />\n                    }\n                    return <Button {...buttonProp}>{name}</Button>\n                });\n            }\n            return (\n                <FormItem {...formItemProps}>\n                    {el}{extraButtons}\n                </FormItem>\n            );\n        });\n        const contentEditModal = this.props.contentEditModal;\n        const editModalWidth = this.props.editModalWidth || 720;\n        // console.log('is open: ', contentEditModal.isOpen);\n        // console.log('width: ', editModalWidth);\n        let footerButtons: any = [{\n            name: '保存',\n            action: this.submit.bind(this, isEditing),\n            isLoading: this.state.confirmLoading,\n            order: 1,\n            disabledIfNotEdited: true\n        }, {\n            name: '取消',\n            action: this.toggleModal.bind(this),\n            order: 2\n        }];\n        if (primaryField && primaryField.extraEditButtons) {\n            footerButtons = footerButtons.concat(primaryField.extraEditButtons);\n        }\n        footerButtons.sort((a, b) => {\n            if (a.order === undefined) {\n                a.order = 0;\n            }\n            if (b.order === undefined) {\n                b.order = 0;\n            }\n            return a.order - b.order;\n        });\n        const footer = footerButtons.map(def => {\n            const props: any = {};\n            if (def.action) {\n                props.onClick = def.action;\n            } else {\n                const actionDef = buttonActions.find(each => each.name === def.actionName);\n                props.onClick = actionDef.action.bind(this);\n            }\n            if (def.isLoading) {\n                props.loading = true;\n            }\n            props.key = def.name;\n            if (def.disabledIfNotEdited) {\n                props.disabled = !this.props.isEdited;\n            }\n            return <Button {...props}>{def.name}</Button>\n        });\n        return (\n            <Modal title={(contentEditModal && contentEditModal.options && contentEditModal.options.modalTitle) || '-'}\n                className=\"edit-form-modal\"\n                width={editModalWidth}\n                visible={contentEditModal && contentEditModal.isOpen}\n                maskClosable={false}\n                footer={footer}\n                onCancel={this.toggleModal.bind(this)}\n                confirmLoading={this.state.confirmLoading}>\n                <Form layout=\"vertical\">{formFields}</Form>\n            </Modal>\n        )\n    }\n}\nconst mapStateToProps = function (state) {\n    let props: any = { ...state.table };\n    props.contentEditModal = state.modal.contentEditModal;\n    props.formFields = state.fields;\n    return props;\n};\nconst mapDispatchToProps = function (dispatch) {\n    return {\n        setTableValue: (key, value) => { dispatch({ type: 'table.setValue', key, value }) },\n        setFieldsValue: (key, value) => { dispatch({ type: 'fields.setValue', key, value }) },\n        dispatch\n    }\n};\nconst container: any = connect(mapStateToProps, mapDispatchToProps)(EditFormModal);\nexport default container;","const SYSTEM = require('./SYSTEM');\r\n// do not add '? ' at the end.\r\nmodule.exports = {\r\n    userLogin: {\r\n        name: '用户登录',\r\n        value: 'https://login.flyme.cn/login/login.html'\r\n    },\r\n    userLogout: {\r\n        name: '用户退出登录',\r\n        value: 'https://login.flyme.cn/sso/logout'\r\n    },\r\n    getUserInfo: {\r\n        name: '获取用户信息（加密接口）',\r\n        value: 'https://i.flyme.cn/uc/sign/getLoginInfoByTicket'\r\n    },\r\n    refreshUserToken: {\r\n        name: '刷新用户token时间',\r\n        value: 'https://i.flyme.cn/uc/webservice/refreshTokenByTicket'\r\n    },\r\n    imageUpload: {\r\n        name: '图片上传，要带上cookie，需要登录认证',\r\n        value: 'http://om.iflow.meizu.com/service/common/upload'\r\n    },\r\n    redirectCpContent: {\r\n        name: '通过id参数，自动跳转到cp内容页',\r\n        value: '/' + SYSTEM.urlVersion.value + '/api/contents/redirect-cp-content'\r\n    }\r\n}"],"sourceRoot":""}